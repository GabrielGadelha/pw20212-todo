{"ast":null,"code":"import { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants';\nimport Push from './lib/push';\nimport Timer from './lib/timer';\nimport RealtimePresence from './RealtimePresence';\nexport default class RealtimeChannel {\n  constructor(topic) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let socket = arguments.length > 2 ? arguments[2] : undefined;\n    this.topic = topic;\n    this.params = params;\n    this.socket = socket;\n    this.bindings = [];\n    this.state = CHANNEL_STATES.closed;\n    this.joinedOnce = false;\n    this.pushBuffer = [];\n    this.timeout = this.socket.timeout;\n    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n    this.rejoinTimer = new Timer(() => this.rejoinUntilConnected(), this.socket.reconnectAfterMs);\n    this.joinPush.receive('ok', () => {\n      this.state = CHANNEL_STATES.joined;\n      this.rejoinTimer.reset();\n      this.pushBuffer.forEach(pushEvent => pushEvent.send());\n      this.pushBuffer = [];\n    });\n    this.onClose(() => {\n      this.rejoinTimer.reset();\n      this.socket.log('channel', `close ${this.topic} ${this.joinRef()}`);\n      this.state = CHANNEL_STATES.closed;\n      this.socket.remove(this);\n    });\n    this.onError(reason => {\n      if (this.isLeaving() || this.isClosed()) {\n        return;\n      }\n\n      this.socket.log('channel', `error ${this.topic}`, reason);\n      this.state = CHANNEL_STATES.errored;\n      this.rejoinTimer.scheduleTimeout();\n    });\n    this.joinPush.receive('timeout', () => {\n      if (!this.isJoining()) {\n        return;\n      }\n\n      this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout);\n      this.state = CHANNEL_STATES.errored;\n      this.rejoinTimer.scheduleTimeout();\n    });\n    this.on(CHANNEL_EVENTS.reply, {}, (payload, ref) => {\n      this.trigger(this.replyEventName(ref), payload);\n    });\n    this.presence = new RealtimePresence(this);\n  }\n\n  list() {\n    return this.presence.list();\n  }\n\n  rejoinUntilConnected() {\n    this.rejoinTimer.scheduleTimeout();\n\n    if (this.socket.isConnected()) {\n      this.rejoin();\n    }\n  }\n\n  subscribe() {\n    let timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n\n    if (this.joinedOnce) {\n      throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`;\n    } else {\n      const configs = this.bindings.reduce((acc, binding) => {\n        const {\n          type\n        } = binding;\n\n        if (!['phx_close', 'phx_error', 'phx_reply', 'presence_diff', 'presence_state'].includes(type)) {\n          acc[type] = binding;\n        }\n\n        return acc;\n      }, {});\n\n      if (Object.keys(configs).length) {\n        this.updateJoinPayload({\n          configs\n        });\n      }\n\n      this.joinedOnce = true;\n      this.rejoin(timeout);\n      return this.joinPush;\n    }\n  }\n  /**\n   * Registers a callback that will be executed when the channel closes.\n   */\n\n\n  onClose(callback) {\n    this.on(CHANNEL_EVENTS.close, {}, callback);\n  }\n  /**\n   * Registers a callback that will be executed when the channel encounteres an error.\n   */\n\n\n  onError(callback) {\n    this.on(CHANNEL_EVENTS.error, {}, reason => callback(reason));\n  }\n\n  on(type, filter, callback) {\n    this.bindings.push({\n      type,\n      filter: filter !== null && filter !== void 0 ? filter : {},\n      callback: callback !== null && callback !== void 0 ? callback : () => {}\n    });\n  }\n\n  off(type, filter) {\n    this.bindings = this.bindings.filter(bind => {\n      return !(bind.type === type && RealtimeChannel.isEqual(bind.filter, filter));\n    });\n  }\n  /**\n   * Returns `true` if the socket is connected and the channel has been joined.\n   */\n\n\n  canPush() {\n    return this.socket.isConnected() && this.isJoined();\n  }\n\n  push(event, payload) {\n    let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.timeout;\n\n    if (!this.joinedOnce) {\n      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;\n    }\n\n    let pushEvent = new Push(this, event, payload, timeout);\n\n    if (this.canPush()) {\n      pushEvent.send();\n    } else {\n      pushEvent.startTimeout();\n      this.pushBuffer.push(pushEvent);\n    }\n\n    return pushEvent;\n  }\n\n  updateJoinPayload(payload) {\n    this.joinPush.updatePayload(payload);\n  }\n  /**\n   * Leaves the channel.\n   *\n   * Unsubscribes from server events, and instructs channel to terminate on server.\n   * Triggers onClose() hooks.\n   *\n   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n   * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n   */\n\n\n  unsubscribe() {\n    let timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n    this.state = CHANNEL_STATES.leaving;\n\n    const onClose = () => {\n      this.socket.log('channel', `leave ${this.topic}`);\n      this.trigger(CHANNEL_EVENTS.close, 'leave', this.joinRef());\n    }; // Destroy joinPush to avoid connection timeouts during unscription phase\n\n\n    this.joinPush.destroy();\n    const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);\n    leavePush.receive('ok', () => onClose()).receive('timeout', () => onClose());\n    leavePush.send();\n\n    if (!this.canPush()) {\n      leavePush.trigger('ok', {});\n    }\n\n    return leavePush;\n  }\n  /**\n   * Overridable message hook\n   *\n   * Receives all events for specialized message handling before dispatching to the channel callbacks.\n   * Must return the payload, modified or unmodified.\n   */\n\n\n  onMessage(event, payload, ref) {\n    return payload;\n  }\n\n  isMember(topic) {\n    return this.topic === topic;\n  }\n\n  joinRef() {\n    return this.joinPush.ref;\n  }\n\n  rejoin() {\n    let timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n\n    if (this.isLeaving()) {\n      return;\n    }\n\n    this.socket.leaveOpenTopic(this.topic);\n    this.state = CHANNEL_STATES.joining;\n    this.joinPush.resend(timeout);\n  }\n\n  trigger(type, payload, ref) {\n    const {\n      close,\n      error,\n      leave,\n      join\n    } = CHANNEL_EVENTS;\n    const events = [close, error, leave, join];\n\n    if (ref && events.indexOf(type) >= 0 && ref !== this.joinRef()) {\n      return;\n    }\n\n    const handledPayload = this.onMessage(type, payload, ref);\n\n    if (payload && !handledPayload) {\n      throw 'channel onMessage callbacks must return the payload, modified or unmodified';\n    }\n\n    this.bindings.filter(bind => {\n      var _a, _b;\n\n      return (bind === null || bind === void 0 ? void 0 : bind.type) === type && (((_a = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _a === void 0 ? void 0 : _a.event) === '*' || ((_b = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _b === void 0 ? void 0 : _b.event) === (payload === null || payload === void 0 ? void 0 : payload.event));\n    }).map(bind => bind.callback(handledPayload, ref));\n  }\n\n  send(payload) {\n    const push = this.push(payload.type, payload);\n    return new Promise((resolve, reject) => {\n      push.receive('ok', () => resolve('ok'));\n      push.receive('timeout', () => reject('timeout'));\n    });\n  }\n\n  replyEventName(ref) {\n    return `chan_reply_${ref}`;\n  }\n\n  isClosed() {\n    return this.state === CHANNEL_STATES.closed;\n  }\n\n  isErrored() {\n    return this.state === CHANNEL_STATES.errored;\n  }\n\n  isJoined() {\n    return this.state === CHANNEL_STATES.joined;\n  }\n\n  isJoining() {\n    return this.state === CHANNEL_STATES.joining;\n  }\n\n  isLeaving() {\n    return this.state === CHANNEL_STATES.leaving;\n  }\n\n  static isEqual(obj1, obj2) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n      return false;\n    }\n\n    for (const k in obj1) {\n      if (obj1[k] !== obj2[k]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,cAAT,EAAyBC,cAAzB,QAA+C,iBAA/C;AACA,OAAOC,IAAP,MAAiB,YAAjB;AAEA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAEA,eAAc,MAAOC,eAAP,CAAsB;EAUlCC,YACSC,KADT,EAG+B;IAAA,IADtBC,MACsB,uEADe,EACf;IAAA,IAAtBC,MAAsB;IAFtB;IACA;IACA;IAZT,gBAAkB,EAAlB;IAEA,aAAQR,cAAc,CAACS,MAAvB;IACA,kBAAa,KAAb;IAGA,kBAAqB,EAArB;IAQE,KAAKC,OAAL,GAAe,KAAKF,MAAL,CAAYE,OAA3B;IACA,KAAKC,QAAL,GAAgB,IAAIV,IAAJ,CACd,IADc,EAEdF,cAAc,CAACa,IAFD,EAGd,KAAKL,MAHS,EAId,KAAKG,OAJS,CAAhB;IAMA,KAAKG,WAAL,GAAmB,IAAIX,KAAJ,CACjB,MAAM,KAAKY,oBAAL,EADW,EAEjB,KAAKN,MAAL,CAAYO,gBAFK,CAAnB;IAIA,KAAKJ,QAAL,CAAcK,OAAd,CAAsB,IAAtB,EAA4B,MAAK;MAC/B,KAAKC,KAAL,GAAajB,cAAc,CAACkB,MAA5B;MACA,KAAKL,WAAL,CAAiBM,KAAjB;MACA,KAAKC,UAAL,CAAgBC,OAAhB,CAAyBC,SAAD,IAAqBA,SAAS,CAACC,IAAV,EAA7C;MACA,KAAKH,UAAL,GAAkB,EAAlB;IACD,CALD;IAMA,KAAKI,OAAL,CAAa,MAAK;MAChB,KAAKX,WAAL,CAAiBM,KAAjB;MACA,KAAKX,MAAL,CAAYiB,GAAZ,CAAgB,SAAhB,EAA2B,SAAS,KAAKnB,KAAK,IAAI,KAAKoB,OAAL,EAAc,EAAhE;MACA,KAAKT,KAAL,GAAajB,cAAc,CAACS,MAA5B;MACA,KAAKD,MAAL,CAAYmB,MAAZ,CAAmB,IAAnB;IACD,CALD;IAMA,KAAKC,OAAL,CAAcC,MAAD,IAAmB;MAC9B,IAAI,KAAKC,SAAL,MAAoB,KAAKC,QAAL,EAAxB,EAAyC;QACvC;MACD;;MACD,KAAKvB,MAAL,CAAYiB,GAAZ,CAAgB,SAAhB,EAA2B,SAAS,KAAKnB,KAAK,EAA9C,EAAkDuB,MAAlD;MACA,KAAKZ,KAAL,GAAajB,cAAc,CAACgC,OAA5B;MACA,KAAKnB,WAAL,CAAiBoB,eAAjB;IACD,CAPD;IAQA,KAAKtB,QAAL,CAAcK,OAAd,CAAsB,SAAtB,EAAiC,MAAK;MACpC,IAAI,CAAC,KAAKkB,SAAL,EAAL,EAAuB;QACrB;MACD;;MACD,KAAK1B,MAAL,CAAYiB,GAAZ,CAAgB,SAAhB,EAA2B,WAAW,KAAKnB,KAAK,EAAhD,EAAoD,KAAKK,QAAL,CAAcD,OAAlE;MACA,KAAKO,KAAL,GAAajB,cAAc,CAACgC,OAA5B;MACA,KAAKnB,WAAL,CAAiBoB,eAAjB;IACD,CAPD;IAQA,KAAKE,EAAL,CAAQpC,cAAc,CAACqC,KAAvB,EAA8B,EAA9B,EAAkC,CAACC,OAAD,EAAeC,GAAf,KAA8B;MAC9D,KAAKC,OAAL,CAAa,KAAKC,cAAL,CAAoBF,GAApB,CAAb,EAAuCD,OAAvC;IACD,CAFD;IAGA,KAAKI,QAAL,GAAgB,IAAItC,gBAAJ,CAAqB,IAArB,CAAhB;EACD;;EAEDuC,IAAI;IACF,OAAO,KAAKD,QAAL,CAAcC,IAAd,EAAP;EACD;;EAED5B,oBAAoB;IAClB,KAAKD,WAAL,CAAiBoB,eAAjB;;IACA,IAAI,KAAKzB,MAAL,CAAYmC,WAAZ,EAAJ,EAA+B;MAC7B,KAAKC,MAAL;IACD;EACF;;EAEDC,SAAS,GAAuB;IAAA,IAAtBnC,OAAsB,uEAAZ,KAAKA,OAAO;;IAC9B,IAAI,KAAKoC,UAAT,EAAqB;MACnB,MAAM,sGAAN;IACD,CAFD,MAEO;MACL,MAAMC,OAAO,GAAG,KAAKC,QAAL,CAAcC,MAAd,CACd,CAACC,GAAD,EAAMC,OAAN,KAAyC;QACvC,MAAM;UAAEC;QAAF,IAAWD,OAAjB;;QACA,IACE,CAAC,CACC,WADD,EAEC,WAFD,EAGC,WAHD,EAIC,eAJD,EAKC,gBALD,EAMCE,QAND,CAMUD,IANV,CADH,EAQE;UACAF,GAAG,CAACE,IAAD,CAAH,GAAYD,OAAZ;QACD;;QACD,OAAOD,GAAP;MACD,CAfa,EAgBd,EAhBc,CAAhB;;MAmBA,IAAII,MAAM,CAACC,IAAP,CAAYR,OAAZ,EAAqBS,MAAzB,EAAiC;QAC/B,KAAKC,iBAAL,CAAuB;UAAEV;QAAF,CAAvB;MACD;;MAED,KAAKD,UAAL,GAAkB,IAAlB;MACA,KAAKF,MAAL,CAAYlC,OAAZ;MACA,OAAO,KAAKC,QAAZ;IACD;EACF;EAED;;;;;EAGAa,OAAO,CAACkC,QAAD,EAAmB;IACxB,KAAKvB,EAAL,CAAQpC,cAAc,CAAC4D,KAAvB,EAA8B,EAA9B,EAAkCD,QAAlC;EACD;EAED;;;;;EAGA9B,OAAO,CAAC8B,QAAD,EAAmB;IACxB,KAAKvB,EAAL,CAAQpC,cAAc,CAAC6D,KAAvB,EAA8B,EAA9B,EAAmC/B,MAAD,IAAoB6B,QAAQ,CAAC7B,MAAD,CAA9D;EACD;;EAEDM,EAAE,CAACiB,IAAD,EAAeS,MAAf,EAAmDH,QAAnD,EAAsE;IACtE,KAAKV,QAAL,CAAcc,IAAd,CAAmB;MACjBV,IADiB;MAEjBS,MAAM,EAAEA,MAAM,SAAN,UAAM,WAAN,YAAU,EAFD;MAGjBH,QAAQ,EAAEA,QAAQ,SAAR,YAAQ,WAAR,cAAa,MAAK,CAAG;IAHd,CAAnB;EAKD;;EAEDK,GAAG,CAACX,IAAD,EAAeS,MAAf,EAA6C;IAC9C,KAAKb,QAAL,GAAgB,KAAKA,QAAL,CAAca,MAAd,CAAsBG,IAAD,IAAS;MAC5C,OAAO,EACLA,IAAI,CAACZ,IAAL,KAAcA,IAAd,IAAsBhD,eAAe,CAAC6D,OAAhB,CAAwBD,IAAI,CAACH,MAA7B,EAAqCA,MAArC,CADjB,CAAP;IAGD,CAJe,CAAhB;EAKD;EAED;;;;;EAGAK,OAAO;IACL,OAAO,KAAK1D,MAAL,CAAYmC,WAAZ,MAA6B,KAAKwB,QAAL,EAApC;EACD;;EAEDL,IAAI,CAACM,KAAD,EAAwB/B,OAAxB,EAA4D;IAAA,IAAtB3B,OAAsB,uEAAZ,KAAKA,OAAO;;IAC9D,IAAI,CAAC,KAAKoC,UAAV,EAAsB;MACpB,MAAM,kBAAkBsB,KAAK,SAAS,KAAK9D,KAAK,iEAAhD;IACD;;IACD,IAAIgB,SAAS,GAAG,IAAIrB,IAAJ,CAAS,IAAT,EAAemE,KAAf,EAAsB/B,OAAtB,EAA+B3B,OAA/B,CAAhB;;IACA,IAAI,KAAKwD,OAAL,EAAJ,EAAoB;MAClB5C,SAAS,CAACC,IAAV;IACD,CAFD,MAEO;MACLD,SAAS,CAAC+C,YAAV;MACA,KAAKjD,UAAL,CAAgB0C,IAAhB,CAAqBxC,SAArB;IACD;;IAED,OAAOA,SAAP;EACD;;EAEDmC,iBAAiB,CAACpB,OAAD,EAAoC;IACnD,KAAK1B,QAAL,CAAc2D,aAAd,CAA4BjC,OAA5B;EACD;EAED;;;;;;;;;;;EASAkC,WAAW,GAAuB;IAAA,IAAtB7D,OAAsB,uEAAZ,KAAKA,OAAO;IAChC,KAAKO,KAAL,GAAajB,cAAc,CAACwE,OAA5B;;IACA,MAAMhD,OAAO,GAAG,MAAK;MACnB,KAAKhB,MAAL,CAAYiB,GAAZ,CAAgB,SAAhB,EAA2B,SAAS,KAAKnB,KAAK,EAA9C;MACA,KAAKiC,OAAL,CAAaxC,cAAc,CAAC4D,KAA5B,EAAmC,OAAnC,EAA4C,KAAKjC,OAAL,EAA5C;IACD,CAHD,CAFgC,CAMhC;;;IACA,KAAKf,QAAL,CAAc8D,OAAd;IAEA,MAAMC,SAAS,GAAG,IAAIzE,IAAJ,CAAS,IAAT,EAAeF,cAAc,CAAC4E,KAA9B,EAAqC,EAArC,EAAyCjE,OAAzC,CAAlB;IACAgE,SAAS,CAAC1D,OAAV,CAAkB,IAAlB,EAAwB,MAAMQ,OAAO,EAArC,EAAyCR,OAAzC,CAAiD,SAAjD,EAA4D,MAAMQ,OAAO,EAAzE;IACAkD,SAAS,CAACnD,IAAV;;IACA,IAAI,CAAC,KAAK2C,OAAL,EAAL,EAAqB;MACnBQ,SAAS,CAACnC,OAAV,CAAkB,IAAlB,EAAwB,EAAxB;IACD;;IAED,OAAOmC,SAAP;EACD;EAED;;;;;;;;EAMAE,SAAS,CAACR,KAAD,EAAgB/B,OAAhB,EAA8BC,GAA9B,EAA0C;IACjD,OAAOD,OAAP;EACD;;EAEDwC,QAAQ,CAACvE,KAAD,EAAc;IACpB,OAAO,KAAKA,KAAL,KAAeA,KAAtB;EACD;;EAEDoB,OAAO;IACL,OAAO,KAAKf,QAAL,CAAc2B,GAArB;EACD;;EAEDM,MAAM,GAAuB;IAAA,IAAtBlC,OAAsB,uEAAZ,KAAKA,OAAO;;IAC3B,IAAI,KAAKoB,SAAL,EAAJ,EAAsB;MACpB;IACD;;IACD,KAAKtB,MAAL,CAAYsE,cAAZ,CAA2B,KAAKxE,KAAhC;IACA,KAAKW,KAAL,GAAajB,cAAc,CAAC+E,OAA5B;IACA,KAAKpE,QAAL,CAAcqE,MAAd,CAAqBtE,OAArB;EACD;;EAED6B,OAAO,CAACa,IAAD,EAAef,OAAf,EAA8BC,GAA9B,EAA0C;IAC/C,MAAM;MAAEqB,KAAF;MAASC,KAAT;MAAgBe,KAAhB;MAAuB/D;IAAvB,IAAgCb,cAAtC;IACA,MAAMkF,MAAM,GAAa,CAACtB,KAAD,EAAQC,KAAR,EAAee,KAAf,EAAsB/D,IAAtB,CAAzB;;IACA,IAAI0B,GAAG,IAAI2C,MAAM,CAACC,OAAP,CAAe9B,IAAf,KAAwB,CAA/B,IAAoCd,GAAG,KAAK,KAAKZ,OAAL,EAAhD,EAAgE;MAC9D;IACD;;IACD,MAAMyD,cAAc,GAAG,KAAKP,SAAL,CAAexB,IAAf,EAAqBf,OAArB,EAA8BC,GAA9B,CAAvB;;IACA,IAAID,OAAO,IAAI,CAAC8C,cAAhB,EAAgC;MAC9B,MAAM,6EAAN;IACD;;IAED,KAAKnC,QAAL,CACGa,MADH,CACWG,IAAD,IAAS;;;MACf,OACE,KAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAEZ,IAAN,MAAeA,IAAf,KACC,WAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAES,MAAN,MAAY,IAAZ,IAAYuB,aAAZ,GAAY,MAAZ,GAAYA,GAAEhB,KAAd,MAAwB,GAAxB,IACC,WAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAEP,MAAN,MAAY,IAAZ,IAAYwB,aAAZ,GAAY,MAAZ,GAAYA,GAAEjB,KAAd,OAAwB/B,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAE+B,KAAjC,CAFF,CADF;IAKD,CAPH,EAQGkB,GARH,CAQQtB,IAAD,IAAUA,IAAI,CAACN,QAAL,CAAcyB,cAAd,EAA8B7C,GAA9B,CARjB;EASD;;EAEDf,IAAI,CAACc,OAAD,EAA8C;IAChD,MAAMyB,IAAI,GAAG,KAAKA,IAAL,CAAUzB,OAAO,CAACe,IAAlB,EAA+Bf,OAA/B,CAAb;IAEA,OAAO,IAAIkD,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;MACrC3B,IAAI,CAAC9C,OAAL,CAAa,IAAb,EAAmB,MAAMwE,OAAO,CAAC,IAAD,CAAhC;MACA1B,IAAI,CAAC9C,OAAL,CAAa,SAAb,EAAwB,MAAMyE,MAAM,CAAC,SAAD,CAApC;IACD,CAHM,CAAP;EAID;;EAEDjD,cAAc,CAACF,GAAD,EAAY;IACxB,OAAO,cAAcA,GAAG,EAAxB;EACD;;EAEDP,QAAQ;IACN,OAAO,KAAKd,KAAL,KAAejB,cAAc,CAACS,MAArC;EACD;;EACDiF,SAAS;IACP,OAAO,KAAKzE,KAAL,KAAejB,cAAc,CAACgC,OAArC;EACD;;EACDmC,QAAQ;IACN,OAAO,KAAKlD,KAAL,KAAejB,cAAc,CAACkB,MAArC;EACD;;EACDgB,SAAS;IACP,OAAO,KAAKjB,KAAL,KAAejB,cAAc,CAAC+E,OAArC;EACD;;EACDjD,SAAS;IACP,OAAO,KAAKb,KAAL,KAAejB,cAAc,CAACwE,OAArC;EACD;;EAEqB,OAAPP,OAAO,CACpB0B,IADoB,EAEpBC,IAFoB,EAEW;IAE/B,IAAItC,MAAM,CAACC,IAAP,CAAYoC,IAAZ,EAAkBnC,MAAlB,KAA6BF,MAAM,CAACC,IAAP,CAAYqC,IAAZ,EAAkBpC,MAAnD,EAA2D;MACzD,OAAO,KAAP;IACD;;IAED,KAAK,MAAMqC,CAAX,IAAgBF,IAAhB,EAAsB;MACpB,IAAIA,IAAI,CAACE,CAAD,CAAJ,KAAYD,IAAI,CAACC,CAAD,CAApB,EAAyB;QACvB,OAAO,KAAP;MACD;IACF;;IAED,OAAO,IAAP;EACD;;AAzRiC","names":["CHANNEL_EVENTS","CHANNEL_STATES","Push","Timer","RealtimePresence","RealtimeChannel","constructor","topic","params","socket","closed","timeout","joinPush","join","rejoinTimer","rejoinUntilConnected","reconnectAfterMs","receive","state","joined","reset","pushBuffer","forEach","pushEvent","send","onClose","log","joinRef","remove","onError","reason","isLeaving","isClosed","errored","scheduleTimeout","isJoining","on","reply","payload","ref","trigger","replyEventName","presence","list","isConnected","rejoin","subscribe","joinedOnce","configs","bindings","reduce","acc","binding","type","includes","Object","keys","length","updateJoinPayload","callback","close","error","filter","push","off","bind","isEqual","canPush","isJoined","event","startTimeout","updatePayload","unsubscribe","leaving","destroy","leavePush","leave","onMessage","isMember","leaveOpenTopic","joining","resend","events","indexOf","handledPayload","_a","_b","map","Promise","resolve","reject","isErrored","obj1","obj2","k"],"sources":["/home/gabriel/Dropbox/Ufersa/Aulas/PW/2021.2/Unidade 2/aula 8 - pratica/todo/node_modules/@supabase/realtime-js/src/RealtimeChannel.ts"],"sourcesContent":["import { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants'\nimport Push from './lib/push'\nimport RealtimeClient from './RealtimeClient'\nimport Timer from './lib/timer'\nimport RealtimePresence from './RealtimePresence'\n\nexport default class RealtimeChannel {\n  bindings: any[] = []\n  timeout: number\n  state = CHANNEL_STATES.closed\n  joinedOnce = false\n  joinPush: Push\n  rejoinTimer: Timer\n  pushBuffer: Push[] = []\n  presence: RealtimePresence\n\n  constructor(\n    public topic: string,\n    public params: { [key: string]: unknown } = {},\n    public socket: RealtimeClient\n  ) {\n    this.timeout = this.socket.timeout\n    this.joinPush = new Push(\n      this,\n      CHANNEL_EVENTS.join,\n      this.params,\n      this.timeout\n    )\n    this.rejoinTimer = new Timer(\n      () => this.rejoinUntilConnected(),\n      this.socket.reconnectAfterMs\n    )\n    this.joinPush.receive('ok', () => {\n      this.state = CHANNEL_STATES.joined\n      this.rejoinTimer.reset()\n      this.pushBuffer.forEach((pushEvent: Push) => pushEvent.send())\n      this.pushBuffer = []\n    })\n    this.onClose(() => {\n      this.rejoinTimer.reset()\n      this.socket.log('channel', `close ${this.topic} ${this.joinRef()}`)\n      this.state = CHANNEL_STATES.closed\n      this.socket.remove(this)\n    })\n    this.onError((reason: string) => {\n      if (this.isLeaving() || this.isClosed()) {\n        return\n      }\n      this.socket.log('channel', `error ${this.topic}`, reason)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n    this.joinPush.receive('timeout', () => {\n      if (!this.isJoining()) {\n        return\n      }\n      this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n    this.on(CHANNEL_EVENTS.reply, {}, (payload: any, ref: string) => {\n      this.trigger(this.replyEventName(ref), payload)\n    })\n    this.presence = new RealtimePresence(this)\n  }\n\n  list() {\n    return this.presence.list()\n  }\n\n  rejoinUntilConnected() {\n    this.rejoinTimer.scheduleTimeout()\n    if (this.socket.isConnected()) {\n      this.rejoin()\n    }\n  }\n\n  subscribe(timeout = this.timeout) {\n    if (this.joinedOnce) {\n      throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`\n    } else {\n      const configs = this.bindings.reduce(\n        (acc, binding: { [key: string]: any }) => {\n          const { type } = binding\n          if (\n            ![\n              'phx_close',\n              'phx_error',\n              'phx_reply',\n              'presence_diff',\n              'presence_state',\n            ].includes(type)\n          ) {\n            acc[type] = binding\n          }\n          return acc\n        },\n        {}\n      )\n\n      if (Object.keys(configs).length) {\n        this.updateJoinPayload({ configs })\n      }\n\n      this.joinedOnce = true\n      this.rejoin(timeout)\n      return this.joinPush\n    }\n  }\n\n  /**\n   * Registers a callback that will be executed when the channel closes.\n   */\n  onClose(callback: Function) {\n    this.on(CHANNEL_EVENTS.close, {}, callback)\n  }\n\n  /**\n   * Registers a callback that will be executed when the channel encounteres an error.\n   */\n  onError(callback: Function) {\n    this.on(CHANNEL_EVENTS.error, {}, (reason: string) => callback(reason))\n  }\n\n  on(type: string, filter?: { [key: string]: string }, callback?: Function) {\n    this.bindings.push({\n      type,\n      filter: filter ?? {},\n      callback: callback ?? (() => {}),\n    })\n  }\n\n  off(type: string, filter: { [key: string]: any }) {\n    this.bindings = this.bindings.filter((bind) => {\n      return !(\n        bind.type === type && RealtimeChannel.isEqual(bind.filter, filter)\n      )\n    })\n  }\n\n  /**\n   * Returns `true` if the socket is connected and the channel has been joined.\n   */\n  canPush(): boolean {\n    return this.socket.isConnected() && this.isJoined()\n  }\n\n  push(event: CHANNEL_EVENTS, payload: any, timeout = this.timeout) {\n    if (!this.joinedOnce) {\n      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`\n    }\n    let pushEvent = new Push(this, event, payload, timeout)\n    if (this.canPush()) {\n      pushEvent.send()\n    } else {\n      pushEvent.startTimeout()\n      this.pushBuffer.push(pushEvent)\n    }\n\n    return pushEvent\n  }\n\n  updateJoinPayload(payload: { [key: string]: unknown }): void {\n    this.joinPush.updatePayload(payload)\n  }\n\n  /**\n   * Leaves the channel.\n   *\n   * Unsubscribes from server events, and instructs channel to terminate on server.\n   * Triggers onClose() hooks.\n   *\n   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n   * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n   */\n  unsubscribe(timeout = this.timeout): Push {\n    this.state = CHANNEL_STATES.leaving\n    const onClose = () => {\n      this.socket.log('channel', `leave ${this.topic}`)\n      this.trigger(CHANNEL_EVENTS.close, 'leave', this.joinRef())\n    }\n    // Destroy joinPush to avoid connection timeouts during unscription phase\n    this.joinPush.destroy()\n\n    const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout)\n    leavePush.receive('ok', () => onClose()).receive('timeout', () => onClose())\n    leavePush.send()\n    if (!this.canPush()) {\n      leavePush.trigger('ok', {})\n    }\n\n    return leavePush\n  }\n\n  /**\n   * Overridable message hook\n   *\n   * Receives all events for specialized message handling before dispatching to the channel callbacks.\n   * Must return the payload, modified or unmodified.\n   */\n  onMessage(event: string, payload: any, ref?: string) {\n    return payload\n  }\n\n  isMember(topic: string): boolean {\n    return this.topic === topic\n  }\n\n  joinRef(): string {\n    return this.joinPush.ref\n  }\n\n  rejoin(timeout = this.timeout): void {\n    if (this.isLeaving()) {\n      return\n    }\n    this.socket.leaveOpenTopic(this.topic)\n    this.state = CHANNEL_STATES.joining\n    this.joinPush.resend(timeout)\n  }\n\n  trigger(type: string, payload?: any, ref?: string) {\n    const { close, error, leave, join } = CHANNEL_EVENTS\n    const events: string[] = [close, error, leave, join]\n    if (ref && events.indexOf(type) >= 0 && ref !== this.joinRef()) {\n      return\n    }\n    const handledPayload = this.onMessage(type, payload, ref)\n    if (payload && !handledPayload) {\n      throw 'channel onMessage callbacks must return the payload, modified or unmodified'\n    }\n\n    this.bindings\n      .filter((bind) => {\n        return (\n          bind?.type === type &&\n          (bind?.filter?.event === '*' ||\n            bind?.filter?.event === payload?.event)\n        )\n      })\n      .map((bind) => bind.callback(handledPayload, ref))\n  }\n\n  send(payload: { type: string; [key: string]: any }) {\n    const push = this.push(payload.type as any, payload)\n\n    return new Promise((resolve, reject) => {\n      push.receive('ok', () => resolve('ok'))\n      push.receive('timeout', () => reject('timeout'))\n    })\n  }\n\n  replyEventName(ref: string): string {\n    return `chan_reply_${ref}`\n  }\n\n  isClosed(): boolean {\n    return this.state === CHANNEL_STATES.closed\n  }\n  isErrored(): boolean {\n    return this.state === CHANNEL_STATES.errored\n  }\n  isJoined(): boolean {\n    return this.state === CHANNEL_STATES.joined\n  }\n  isJoining(): boolean {\n    return this.state === CHANNEL_STATES.joining\n  }\n  isLeaving(): boolean {\n    return this.state === CHANNEL_STATES.leaving\n  }\n\n  private static isEqual(\n    obj1: { [key: string]: string },\n    obj2: { [key: string]: string }\n  ) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n      return false\n    }\n\n    for (const k in obj1) {\n      if (obj1[k] !== obj2[k]) {\n        return false\n      }\n    }\n\n    return true\n  }\n}\n"]},"metadata":{},"sourceType":"module"}