{"ast":null,"code":"import { PostgrestQueryBuilder } from '@supabase/postgrest-js';\nimport { SupabaseRealtimeClient } from './SupabaseRealtimeClient';\nexport class SupabaseQueryBuilder extends PostgrestQueryBuilder {\n  constructor(url, _ref) {\n    let {\n      headers = {},\n      schema,\n      realtime,\n      table,\n      fetch,\n      shouldThrowOnError\n    } = _ref;\n    super(url, {\n      headers,\n      schema,\n      fetch,\n      shouldThrowOnError\n    });\n    this._subscription = null;\n    this._realtime = realtime;\n    this._headers = headers;\n    this._schema = schema;\n    this._table = table;\n  }\n  /**\n   * Subscribe to realtime changes in your database.\n   * @param event The database event which you would like to receive updates for, or you can use the special wildcard `*` to listen to all changes.\n   * @param callback A callback that will handle the payload that is sent whenever your database changes.\n   */\n\n\n  on(event, callback) {\n    if (!this._realtime.isConnected()) {\n      this._realtime.connect();\n    }\n\n    if (!this._subscription) {\n      this._subscription = new SupabaseRealtimeClient(this._realtime, this._headers, this._schema, this._table);\n    }\n\n    return this._subscription.on(event, callback);\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,qBAAT,QAAsC,wBAAtC;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AAIA,OAAM,MAAOC,oBAAP,SAAuCF,qBAAvC,CAA+D;EAOnEG,YACEC,GADF,QAgBG;IAAA,IAdD;MACEC,OAAO,GAAG,EADZ;MAEEC,MAFF;MAGEC,QAHF;MAIEC,KAJF;MAKEC,KALF;MAMEC;IANF,CAcC;IAED,MAAMN,GAAN,EAAW;MAAEC,OAAF;MAAWC,MAAX;MAAmBG,KAAnB;MAA0BC;IAA1B,CAAX;IAxBM,qBAA+C,IAA/C;IA0BN,KAAKC,SAAL,GAAiBJ,QAAjB;IACA,KAAKK,QAAL,GAAgBP,OAAhB;IACA,KAAKQ,OAAL,GAAeP,MAAf;IACA,KAAKQ,MAAL,GAAcN,KAAd;EACD;EAED;;;;;;;EAKAO,EAAE,CACAC,KADA,EAEAC,QAFA,EAEuD;IAEvD,IAAI,CAAC,KAAKN,SAAL,CAAeO,WAAf,EAAL,EAAmC;MACjC,KAAKP,SAAL,CAAeQ,OAAf;IACD;;IACD,IAAI,CAAC,KAAKC,aAAV,EAAyB;MACvB,KAAKA,aAAL,GAAqB,IAAInB,sBAAJ,CACnB,KAAKU,SADc,EAEnB,KAAKC,QAFc,EAGnB,KAAKC,OAHc,EAInB,KAAKC,MAJc,CAArB;IAMD;;IACD,OAAO,KAAKM,aAAL,CAAmBL,EAAnB,CAAsBC,KAAtB,EAA6BC,QAA7B,CAAP;EACD;;AAtDkE","names":["PostgrestQueryBuilder","SupabaseRealtimeClient","SupabaseQueryBuilder","constructor","url","headers","schema","realtime","table","fetch","shouldThrowOnError","_realtime","_headers","_schema","_table","on","event","callback","isConnected","connect","_subscription"],"sources":["/home/gabriel/Dropbox/Ufersa/Aulas/PW/2021.2/Unidade 2/aula 8 - pratica/todo/node_modules/@supabase/supabase-js/src/lib/SupabaseQueryBuilder.ts"],"sourcesContent":["import { PostgrestQueryBuilder } from '@supabase/postgrest-js'\nimport { SupabaseRealtimeClient } from './SupabaseRealtimeClient'\nimport { RealtimeClient } from '@supabase/realtime-js'\nimport { Fetch, GenericObject, SupabaseEventTypes, SupabaseRealtimePayload } from './types'\n\nexport class SupabaseQueryBuilder<T> extends PostgrestQueryBuilder<T> {\n  private _subscription: SupabaseRealtimeClient | null = null\n  private _realtime: RealtimeClient\n  private _headers: GenericObject\n  private _schema: string\n  private _table: string\n\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      realtime,\n      table,\n      fetch,\n      shouldThrowOnError,\n    }: {\n      headers?: GenericObject\n      schema: string\n      realtime: RealtimeClient\n      table: string\n      fetch?: Fetch\n      shouldThrowOnError?: boolean\n    }\n  ) {\n    super(url, { headers, schema, fetch, shouldThrowOnError })\n\n    this._realtime = realtime\n    this._headers = headers\n    this._schema = schema\n    this._table = table\n  }\n\n  /**\n   * Subscribe to realtime changes in your database.\n   * @param event The database event which you would like to receive updates for, or you can use the special wildcard `*` to listen to all changes.\n   * @param callback A callback that will handle the payload that is sent whenever your database changes.\n   */\n  on(\n    event: SupabaseEventTypes,\n    callback: (payload: SupabaseRealtimePayload<T>) => void\n  ): SupabaseRealtimeClient {\n    if (!this._realtime.isConnected()) {\n      this._realtime.connect()\n    }\n    if (!this._subscription) {\n      this._subscription = new SupabaseRealtimeClient(\n        this._realtime,\n        this._headers,\n        this._schema,\n        this._table\n      )\n    }\n    return this._subscription.on(event, callback)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}