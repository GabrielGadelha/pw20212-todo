{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { get, post, remove } from './fetch';\nimport { resolveFetch } from './helpers';\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc'\n  }\n};\nconst DEFAULT_FILE_OPTIONS = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false\n};\nexport class StorageFileApi {\n  constructor(url) {\n    let headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let bucketId = arguments.length > 2 ? arguments[2] : undefined;\n    let fetch = arguments.length > 3 ? arguments[3] : undefined;\n    this.url = url;\n    this.headers = headers;\n    this.bucketId = bucketId;\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n\n\n  uploadOrUpdate(method, path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let body;\n        const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n        const headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n          'x-upsert': String(options.upsert)\n        });\n\n        if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n          body = new FormData();\n          body.append('cacheControl', options.cacheControl);\n          body.append('', fileBody);\n        } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n          body = fileBody;\n          body.append('cacheControl', options.cacheControl);\n        } else {\n          body = fileBody;\n          headers['cache-control'] = `max-age=${options.cacheControl}`;\n          headers['content-type'] = options.contentType;\n        }\n\n        const cleanPath = this._removeEmptyFolders(path);\n\n        const _path = this._getFinalPath(cleanPath);\n\n        const res = yield this.fetch(`${this.url}/object/${_path}`, {\n          method,\n          body: body,\n          headers\n        });\n\n        if (res.ok) {\n          // const data = await res.json()\n          // temporary fix till backend is updated to the latest storage-api version\n          return {\n            data: {\n              Key: _path\n            },\n            error: null\n          };\n        } else {\n          const error = yield res.json();\n          return {\n            data: null,\n            error\n          };\n        }\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n\n\n  upload(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n    });\n  }\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n\n\n  update(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n    });\n  }\n  /**\n   * Moves an existing file.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n   */\n\n\n  move(fromPath, toPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/move`, {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Copies an existing file.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   */\n\n\n  copy(fromPath, toPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/copy`, {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Create signed URL to download file without requiring permissions. This URL can be valid for a set number of seconds.\n   *\n   * @param path The file path to be downloaded, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   */\n\n\n  createSignedUrl(path, expiresIn) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const _path = this._getFinalPath(path);\n\n        let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, {\n          expiresIn\n        }, {\n          headers: this.headers\n        });\n        const signedURL = `${this.url}${data.signedURL}`;\n        data = {\n          signedURL\n        };\n        return {\n          data,\n          error: null,\n          signedURL\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error,\n          signedURL: null\n        };\n      }\n    });\n  }\n  /**\n   * Create signed URLs to download files without requiring permissions. These URLs can be valid for a set number of seconds.\n   *\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n   */\n\n\n  createSignedUrls(paths, expiresIn) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, {\n          expiresIn,\n          paths\n        }, {\n          headers: this.headers\n        });\n        return {\n          data: data.map(datum => Object.assign(Object.assign({}, datum), {\n            signedURL: datum.signedURL ? `${this.url}${datum.signedURL}` : null\n          })),\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Downloads a file.\n   *\n   * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n   */\n\n\n  download(path) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const _path = this._getFinalPath(path);\n\n        const res = yield get(this.fetch, `${this.url}/object/${_path}`, {\n          headers: this.headers,\n          noResolveJson: true\n        });\n        const data = yield res.blob();\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Retrieve URLs for assets in public buckets\n   *\n   * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n   */\n\n\n  getPublicUrl(path) {\n    try {\n      const _path = this._getFinalPath(path);\n\n      const publicURL = `${this.url}/object/public/${_path}`;\n      const data = {\n        publicURL\n      };\n      return {\n        data,\n        error: null,\n        publicURL\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error,\n        publicURL: null\n      };\n    }\n  }\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to be deleted, including the path and file name. For example [`folder/image.png`].\n   */\n\n\n  remove(paths) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, {\n          prefixes: paths\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(id: string): Promise<{ data: Metadata | null; error: Error | null }> {\n  //   try {\n  //     const data = await get(`${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     return { data: null, error }\n  //   }\n  // }\n\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<{ data: Metadata | null; error: Error | null }> {\n  //   try {\n  //     const data = await post(`${this.url}/metadata/${id}`, { ...meta }, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     return { data: null, error }\n  //   }\n  // }\n\n  /**\n   * Lists all the files within a bucket.\n   * @param path The folder path.\n   * @param options Search options, including `limit`, `offset`, and `sortBy`.\n   * @param parameters Fetch parameters, currently only supports `signal`, which is an AbortController's signal\n   */\n\n\n  list(path, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n          prefix: path || ''\n        });\n        const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, {\n          headers: this.headers\n        }, parameters);\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error\n        };\n      }\n    });\n  }\n\n  _getFinalPath(path) {\n    return `${this.bucketId}/${path}`;\n  }\n\n  _removeEmptyFolders(path) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n  }\n\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAiCA,GAAjC,EAAsCC,IAAtC,EAA4CC,MAA5C,QAA0D,SAA1D;AACA,SAASC,YAAT,QAA6B,WAA7B;AAGA,MAAMC,sBAAsB,GAAG;EAC7BC,KAAK,EAAE,GADsB;EAE7BC,MAAM,EAAE,CAFqB;EAG7BC,MAAM,EAAE;IACNC,MAAM,EAAE,MADF;IAENC,KAAK,EAAE;EAFD;AAHqB,CAA/B;AASA,MAAMC,oBAAoB,GAAgB;EACxCC,YAAY,EAAE,MAD0B;EAExCC,WAAW,EAAE,0BAF2B;EAGxCC,MAAM,EAAE;AAHgC,CAA1C;AAMA,OAAM,MAAOC,cAAP,CAAqB;EAMzBC,YACEC,GADF,EAIe;IAAA,IAFbC,OAEa,uEAFwB,EAExB;IAAA,IADbC,QACa;IAAA,IAAbC,KAAa;IAEb,KAAKH,GAAL,GAAWA,GAAX;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKC,QAAL,GAAgBA,QAAhB;IACA,KAAKC,KAAL,GAAahB,YAAY,CAACgB,KAAD,CAAzB;EACD;EAED;;;;;;;;;;;;;EAWcC,cAAc,CAC1BC,MAD0B,EAE1BC,IAF0B,EAG1BC,QAH0B,EAc1BC,WAd0B,EAcD;;MAEzB,IAAI;QACF,IAAIC,IAAJ;QACA,MAAMC,OAAO,mCAAQhB,oBAAR,GAAiCc,WAAjC,CAAb;QACA,MAAMP,OAAO,mCACR,KAAKA,OADG,GAEPI,MAAM,KAAK,MAAX,IAAqB;UAAE,YAAYM,MAAM,CAACD,OAAO,CAACb,MAAT;QAApB,CAFd,CAAb;;QAKA,IAAI,OAAOe,IAAP,KAAgB,WAAhB,IAA+BL,QAAQ,YAAYK,IAAvD,EAA6D;UAC3DH,IAAI,GAAG,IAAII,QAAJ,EAAP;UACAJ,IAAI,CAACK,MAAL,CAAY,cAAZ,EAA4BJ,OAAO,CAACf,YAApC;UACAc,IAAI,CAACK,MAAL,CAAY,EAAZ,EAAgBP,QAAhB;QACD,CAJD,MAIO,IAAI,OAAOM,QAAP,KAAoB,WAApB,IAAmCN,QAAQ,YAAYM,QAA3D,EAAqE;UAC1EJ,IAAI,GAAGF,QAAP;UACAE,IAAI,CAACK,MAAL,CAAY,cAAZ,EAA4BJ,OAAO,CAACf,YAApC;QACD,CAHM,MAGA;UACLc,IAAI,GAAGF,QAAP;UACAN,OAAO,CAAC,eAAD,CAAP,GAA2B,WAAWS,OAAO,CAACf,YAAY,EAA1D;UACAM,OAAO,CAAC,cAAD,CAAP,GAA0BS,OAAO,CAACd,WAAlC;QACD;;QAED,MAAMmB,SAAS,GAAG,KAAKC,mBAAL,CAAyBV,IAAzB,CAAlB;;QACA,MAAMW,KAAK,GAAG,KAAKC,aAAL,CAAmBH,SAAnB,CAAd;;QACA,MAAMI,GAAG,GAAG,MAAM,KAAKhB,KAAL,CAAW,GAAG,KAAKH,GAAG,WAAWiB,KAAK,EAAtC,EAA0C;UAC1DZ,MAD0D;UAE1DI,IAAI,EAAEA,IAFoD;UAG1DR;QAH0D,CAA1C,CAAlB;;QAMA,IAAIkB,GAAG,CAACC,EAAR,EAAY;UACV;UACA;UACA,OAAO;YAAEC,IAAI,EAAE;cAAEC,GAAG,EAAEL;YAAP,CAAR;YAAwBM,KAAK,EAAE;UAA/B,CAAP;QACD,CAJD,MAIO;UACL,MAAMA,KAAK,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAApB;UACA,OAAO;YAAEH,IAAI,EAAE,IAAR;YAAcE;UAAd,CAAP;QACD;MACF,CArCD,CAqCE,OAAOA,KAAP,EAAc;QACd,OAAO;UAAEF,IAAI,EAAE,IAAR;UAAcE;QAAd,CAAP;MACD;IACF;EAAA;EAED;;;;;;;;;;;;EAUME,MAAM,CACVnB,IADU,EAEVC,QAFU,EAaVC,WAbU,EAae;;MAEzB,OAAO,KAAKJ,cAAL,CAAoB,MAApB,EAA4BE,IAA5B,EAAkCC,QAAlC,EAA4CC,WAA5C,CAAP;IACD;EAAA;EAED;;;;;;;;;;;;EAUMkB,MAAM,CACVpB,IADU,EAEVC,QAFU,EAaVC,WAbU,EAae;;MAEzB,OAAO,KAAKJ,cAAL,CAAoB,KAApB,EAA2BE,IAA3B,EAAiCC,QAAjC,EAA2CC,WAA3C,CAAP;IACD;EAAA;EAED;;;;;;;;EAMMmB,IAAI,CACRC,QADQ,EAERC,MAFQ,EAEM;;MAEd,IAAI;QACF,MAAMR,IAAI,GAAG,MAAMpC,IAAI,CACrB,KAAKkB,KADgB,EAErB,GAAG,KAAKH,GAAG,cAFU,EAGrB;UAAEE,QAAQ,EAAE,KAAKA,QAAjB;UAA2B4B,SAAS,EAAEF,QAAtC;UAAgDG,cAAc,EAAEF;QAAhE,CAHqB,EAIrB;UAAE5B,OAAO,EAAE,KAAKA;QAAhB,CAJqB,CAAvB;QAMA,OAAO;UAAEoB,IAAF;UAAQE,KAAK,EAAE;QAAf,CAAP;MACD,CARD,CAQE,OAAOA,KAAP,EAAc;QACd,OAAO;UAAEF,IAAI,EAAE,IAAR;UAAcE;QAAd,CAAP;MACD;IACF;EAAA;EAED;;;;;;;;EAMMS,IAAI,CACRJ,QADQ,EAERC,MAFQ,EAEM;;MAEd,IAAI;QACF,MAAMR,IAAI,GAAG,MAAMpC,IAAI,CACrB,KAAKkB,KADgB,EAErB,GAAG,KAAKH,GAAG,cAFU,EAGrB;UAAEE,QAAQ,EAAE,KAAKA,QAAjB;UAA2B4B,SAAS,EAAEF,QAAtC;UAAgDG,cAAc,EAAEF;QAAhE,CAHqB,EAIrB;UAAE5B,OAAO,EAAE,KAAKA;QAAhB,CAJqB,CAAvB;QAMA,OAAO;UAAEoB,IAAF;UAAQE,KAAK,EAAE;QAAf,CAAP;MACD,CARD,CAQE,OAAOA,KAAP,EAAc;QACd,OAAO;UAAEF,IAAI,EAAE,IAAR;UAAcE;QAAd,CAAP;MACD;IACF;EAAA;EAED;;;;;;;;EAMMU,eAAe,CACnB3B,IADmB,EAEnB4B,SAFmB,EAEF;;MAMjB,IAAI;QACF,MAAMjB,KAAK,GAAG,KAAKC,aAAL,CAAmBZ,IAAnB,CAAd;;QACA,IAAIe,IAAI,GAAG,MAAMpC,IAAI,CACnB,KAAKkB,KADc,EAEnB,GAAG,KAAKH,GAAG,gBAAgBiB,KAAK,EAFb,EAGnB;UAAEiB;QAAF,CAHmB,EAInB;UAAEjC,OAAO,EAAE,KAAKA;QAAhB,CAJmB,CAArB;QAMA,MAAMkC,SAAS,GAAG,GAAG,KAAKnC,GAAG,GAAGqB,IAAI,CAACc,SAAS,EAA9C;QACAd,IAAI,GAAG;UAAEc;QAAF,CAAP;QACA,OAAO;UAAEd,IAAF;UAAQE,KAAK,EAAE,IAAf;UAAqBY;QAArB,CAAP;MACD,CAXD,CAWE,OAAOZ,KAAP,EAAc;QACd,OAAO;UAAEF,IAAI,EAAE,IAAR;UAAcE,KAAd;UAAqBY,SAAS,EAAE;QAAhC,CAAP;MACD;IACF;EAAA;EAED;;;;;;;;EAMMC,gBAAgB,CACpBC,KADoB,EAEpBH,SAFoB,EAEH;;MAKjB,IAAI;QACF,MAAMb,IAAI,GAAG,MAAMpC,IAAI,CACrB,KAAKkB,KADgB,EAErB,GAAG,KAAKH,GAAG,gBAAgB,KAAKE,QAAQ,EAFnB,EAGrB;UAAEgC,SAAF;UAAaG;QAAb,CAHqB,EAIrB;UAAEpC,OAAO,EAAE,KAAKA;QAAhB,CAJqB,CAAvB;QAMA,OAAO;UACLoB,IAAI,EAAEA,IAAI,CAACiB,GAAL,CAAUC,KAAD,IAAkCC,gCAC5CD,KAD4C,GACvC;YACRJ,SAAS,EAAEI,KAAK,CAACJ,SAAN,GAAkB,GAAG,KAAKnC,GAAG,GAAGuC,KAAK,CAACJ,SAAS,EAA/C,GAAoD;UADvD,CADuC,CAA3C,CADD;UAKLZ,KAAK,EAAE;QALF,CAAP;MAOD,CAdD,CAcE,OAAOA,KAAP,EAAc;QACd,OAAO;UAAEF,IAAI,EAAE,IAAR;UAAcE;QAAd,CAAP;MACD;IACF;EAAA;EAED;;;;;;;EAKMkB,QAAQ,CAACnC,IAAD,EAAa;;MACzB,IAAI;QACF,MAAMW,KAAK,GAAG,KAAKC,aAAL,CAAmBZ,IAAnB,CAAd;;QACA,MAAMa,GAAG,GAAG,MAAMnC,GAAG,CAAC,KAAKmB,KAAN,EAAa,GAAG,KAAKH,GAAG,WAAWiB,KAAK,EAAxC,EAA4C;UAC/DhB,OAAO,EAAE,KAAKA,OADiD;UAE/DyC,aAAa,EAAE;QAFgD,CAA5C,CAArB;QAIA,MAAMrB,IAAI,GAAG,MAAMF,GAAG,CAACwB,IAAJ,EAAnB;QACA,OAAO;UAAEtB,IAAF;UAAQE,KAAK,EAAE;QAAf,CAAP;MACD,CARD,CAQE,OAAOA,KAAP,EAAc;QACd,OAAO;UAAEF,IAAI,EAAE,IAAR;UAAcE;QAAd,CAAP;MACD;IACF;EAAA;EAED;;;;;;;EAKAqB,YAAY,CACVtC,IADU,EACE;IAMZ,IAAI;MACF,MAAMW,KAAK,GAAG,KAAKC,aAAL,CAAmBZ,IAAnB,CAAd;;MACA,MAAMuC,SAAS,GAAG,GAAG,KAAK7C,GAAG,kBAAkBiB,KAAK,EAApD;MACA,MAAMI,IAAI,GAAG;QAAEwB;MAAF,CAAb;MACA,OAAO;QAAExB,IAAF;QAAQE,KAAK,EAAE,IAAf;QAAqBsB;MAArB,CAAP;IACD,CALD,CAKE,OAAOtB,KAAP,EAAc;MACd,OAAO;QAAEF,IAAI,EAAE,IAAR;QAAcE,KAAd;QAAqBsB,SAAS,EAAE;MAAhC,CAAP;IACD;EACF;EAED;;;;;;;EAKM3D,MAAM,CAACmD,KAAD,EAAgB;;MAC1B,IAAI;QACF,MAAMhB,IAAI,GAAG,MAAMnC,MAAM,CACvB,KAAKiB,KADkB,EAEvB,GAAG,KAAKH,GAAG,WAAW,KAAKE,QAAQ,EAFZ,EAGvB;UAAE4C,QAAQ,EAAET;QAAZ,CAHuB,EAIvB;UAAEpC,OAAO,EAAE,KAAKA;QAAhB,CAJuB,CAAzB;QAMA,OAAO;UAAEoB,IAAF;UAAQE,KAAK,EAAE;QAAf,CAAP;MACD,CARD,CAQE,OAAOA,KAAP,EAAc;QACd,OAAO;UAAEF,IAAI,EAAE,IAAR;UAAcE;QAAd,CAAP;MACD;IACF;EAAA;EAED;;;;EAIA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;;;;EAKA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;;;;;;;EAMMwB,IAAI,CACRzC,IADQ,EAERI,OAFQ,EAGRsC,UAHQ,EAGoB;;MAE5B,IAAI;QACF,MAAMvC,IAAI,iDAAQrB,sBAAR,GAAmCsB,OAAnC,GAA0C;UAAEuC,MAAM,EAAE3C,IAAI,IAAI;QAAlB,CAA1C,CAAV;QACA,MAAMe,IAAI,GAAG,MAAMpC,IAAI,CACrB,KAAKkB,KADgB,EAErB,GAAG,KAAKH,GAAG,gBAAgB,KAAKE,QAAQ,EAFnB,EAGrBO,IAHqB,EAIrB;UAAER,OAAO,EAAE,KAAKA;QAAhB,CAJqB,EAKrB+C,UALqB,CAAvB;QAOA,OAAO;UAAE3B,IAAF;UAAQE,KAAK,EAAE;QAAf,CAAP;MACD,CAVD,CAUE,OAAOA,KAAP,EAAc;QACd,OAAO;UAAEF,IAAI,EAAE,IAAR;UAAcE;QAAd,CAAP;MACD;IACF;EAAA;;EAEDL,aAAa,CAACZ,IAAD,EAAa;IACxB,OAAO,GAAG,KAAKJ,QAAQ,IAAII,IAAI,EAA/B;EACD;;EAEDU,mBAAmB,CAACV,IAAD,EAAa;IAC9B,OAAOA,IAAI,CAAC4C,OAAL,CAAa,UAAb,EAAyB,EAAzB,EAA6BA,OAA7B,CAAqC,MAArC,EAA6C,GAA7C,CAAP;EACD;;AArXwB","names":["get","post","remove","resolveFetch","DEFAULT_SEARCH_OPTIONS","limit","offset","sortBy","column","order","DEFAULT_FILE_OPTIONS","cacheControl","contentType","upsert","StorageFileApi","constructor","url","headers","bucketId","fetch","uploadOrUpdate","method","path","fileBody","fileOptions","body","options","String","Blob","FormData","append","cleanPath","_removeEmptyFolders","_path","_getFinalPath","res","ok","data","Key","error","json","upload","update","move","fromPath","toPath","sourceKey","destinationKey","copy","createSignedUrl","expiresIn","signedURL","createSignedUrls","paths","map","datum","Object","download","noResolveJson","blob","getPublicUrl","publicURL","prefixes","list","parameters","prefix","replace"],"sources":["/home/gabriel/Dropbox/Ufersa/Aulas/PW/2021.2/Unidade 2/aula 8 - pratica/todo/node_modules/@supabase/storage-js/src/lib/StorageFileApi.ts"],"sourcesContent":["import { Fetch, FetchParameters, get, post, remove } from './fetch'\nimport { resolveFetch } from './helpers'\nimport { FileObject, FileOptions, SearchOptions } from './types'\n\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc',\n  },\n}\n\nconst DEFAULT_FILE_OPTIONS: FileOptions = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false,\n}\n\nexport class StorageFileApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected bucketId?: string\n  protected fetch: Fetch\n\n  constructor(\n    url: string,\n    headers: { [key: string]: string } = {},\n    bucketId?: string,\n    fetch?: Fetch\n  ) {\n    this.url = url\n    this.headers = headers\n    this.bucketId = bucketId\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  private async uploadOrUpdate(\n    method: 'POST' | 'PUT',\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<{ data: { Key: string } | null; error: Error | null }> {\n    try {\n      let body\n      const options = { ...DEFAULT_FILE_OPTIONS, ...fileOptions }\n      const headers: Record<string, string> = {\n        ...this.headers,\n        ...(method === 'POST' && { 'x-upsert': String(options.upsert as boolean) }),\n      }\n\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n        body = new FormData()\n        body.append('cacheControl', options.cacheControl as string)\n        body.append('', fileBody)\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n        body = fileBody\n        body.append('cacheControl', options.cacheControl as string)\n      } else {\n        body = fileBody\n        headers['cache-control'] = `max-age=${options.cacheControl}`\n        headers['content-type'] = options.contentType as string\n      }\n\n      const cleanPath = this._removeEmptyFolders(path)\n      const _path = this._getFinalPath(cleanPath)\n      const res = await this.fetch(`${this.url}/object/${_path}`, {\n        method,\n        body: body as BodyInit,\n        headers,\n      })\n\n      if (res.ok) {\n        // const data = await res.json()\n        // temporary fix till backend is updated to the latest storage-api version\n        return { data: { Key: _path }, error: null }\n      } else {\n        const error = await res.json()\n        return { data: null, error }\n      }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  async upload(\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<{ data: { Key: string } | null; error: Error | null }> {\n    return this.uploadOrUpdate('POST', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  async update(\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<{ data: { Key: string } | null; error: Error | null }> {\n    return this.uploadOrUpdate('PUT', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Moves an existing file.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n   */\n  async move(\n    fromPath: string,\n    toPath: string\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/move`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Copies an existing file.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   */\n  async copy(\n    fromPath: string,\n    toPath: string\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/copy`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Create signed URL to download file without requiring permissions. This URL can be valid for a set number of seconds.\n   *\n   * @param path The file path to be downloaded, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   */\n  async createSignedUrl(\n    path: string,\n    expiresIn: number\n  ): Promise<{\n    data: { signedURL: string } | null\n    error: Error | null\n    signedURL: string | null\n  }> {\n    try {\n      const _path = this._getFinalPath(path)\n      let data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${_path}`,\n        { expiresIn },\n        { headers: this.headers }\n      )\n      const signedURL = `${this.url}${data.signedURL}`\n      data = { signedURL }\n      return { data, error: null, signedURL }\n    } catch (error) {\n      return { data: null, error, signedURL: null }\n    }\n  }\n\n  /**\n   * Create signed URLs to download files without requiring permissions. These URLs can be valid for a set number of seconds.\n   *\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n   */\n  async createSignedUrls(\n    paths: string[],\n    expiresIn: number\n  ): Promise<{\n    data: { error: string | null; path: string | null; signedURL: string }[] | null\n    error: Error | null\n  }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${this.bucketId}`,\n        { expiresIn, paths },\n        { headers: this.headers }\n      )\n      return {\n        data: data.map((datum: { signedURL: string }) => ({\n          ...datum,\n          signedURL: datum.signedURL ? `${this.url}${datum.signedURL}` : null,\n        })),\n        error: null,\n      }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Downloads a file.\n   *\n   * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n   */\n  async download(path: string): Promise<{ data: Blob | null; error: Error | null }> {\n    try {\n      const _path = this._getFinalPath(path)\n      const res = await get(this.fetch, `${this.url}/object/${_path}`, {\n        headers: this.headers,\n        noResolveJson: true,\n      })\n      const data = await res.blob()\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Retrieve URLs for assets in public buckets\n   *\n   * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n   */\n  getPublicUrl(\n    path: string\n  ): {\n    data: { publicURL: string } | null\n    error: Error | null\n    publicURL: string | null\n  } {\n    try {\n      const _path = this._getFinalPath(path)\n      const publicURL = `${this.url}/object/public/${_path}`\n      const data = { publicURL }\n      return { data, error: null, publicURL }\n    } catch (error) {\n      return { data: null, error, publicURL: null }\n    }\n  }\n\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to be deleted, including the path and file name. For example [`folder/image.png`].\n   */\n  async remove(paths: string[]): Promise<{ data: FileObject[] | null; error: Error | null }> {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/object/${this.bucketId}`,\n        { prefixes: paths },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(id: string): Promise<{ data: Metadata | null; error: Error | null }> {\n  //   try {\n  //     const data = await get(`${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     return { data: null, error }\n  //   }\n  // }\n\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<{ data: Metadata | null; error: Error | null }> {\n  //   try {\n  //     const data = await post(`${this.url}/metadata/${id}`, { ...meta }, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     return { data: null, error }\n  //   }\n  // }\n\n  /**\n   * Lists all the files within a bucket.\n   * @param path The folder path.\n   * @param options Search options, including `limit`, `offset`, and `sortBy`.\n   * @param parameters Fetch parameters, currently only supports `signal`, which is an AbortController's signal\n   */\n  async list(\n    path?: string,\n    options?: SearchOptions,\n    parameters?: FetchParameters\n  ): Promise<{ data: FileObject[] | null; error: Error | null }> {\n    try {\n      const body = { ...DEFAULT_SEARCH_OPTIONS, ...options, prefix: path || '' }\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/list/${this.bucketId}`,\n        body,\n        { headers: this.headers },\n        parameters\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  _getFinalPath(path: string) {\n    return `${this.bucketId}/${path}`\n  }\n\n  _removeEmptyFolders(path: string) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/')\n  }\n}\n"]},"metadata":{},"sourceType":"module"}