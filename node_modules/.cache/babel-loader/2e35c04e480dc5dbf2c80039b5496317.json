{"ast":null,"code":"import { Transformers } from '@supabase/realtime-js';\nexport class SupabaseRealtimeClient {\n  constructor(socket, headers, schema, tableName) {\n    const chanParams = {};\n    const topic = tableName === '*' ? `realtime:${schema}` : `realtime:${schema}:${tableName}`;\n    const userToken = headers['Authorization'].split(' ')[1];\n\n    if (userToken) {\n      chanParams['user_token'] = userToken;\n    }\n\n    this.subscription = socket.channel(topic, chanParams);\n  }\n\n  getPayloadRecords(payload) {\n    const records = {\n      new: {},\n      old: {}\n    };\n\n    if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n      records.new = Transformers.convertChangeData(payload.columns, payload.record);\n    }\n\n    if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n      records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n    }\n\n    return records;\n  }\n  /**\n   * The event you want to listen to.\n   *\n   * @param event The event\n   * @param callback A callback function that is called whenever the event occurs.\n   */\n\n\n  on(event, callback) {\n    this.subscription.on(event, payload => {\n      let enrichedPayload = {\n        schema: payload.schema,\n        table: payload.table,\n        commit_timestamp: payload.commit_timestamp,\n        eventType: payload.type,\n        new: {},\n        old: {},\n        errors: payload.errors\n      };\n      enrichedPayload = Object.assign(Object.assign({}, enrichedPayload), this.getPayloadRecords(payload));\n      callback(enrichedPayload);\n    });\n    return this;\n  }\n  /**\n   * Enables the subscription.\n   */\n\n\n  subscribe() {\n    let callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => {};\n    this.subscription.onError(e => callback('SUBSCRIPTION_ERROR', e));\n    this.subscription.onClose(() => callback('CLOSED'));\n    this.subscription.subscribe().receive('ok', () => callback('SUBSCRIBED')).receive('error', e => callback('SUBSCRIPTION_ERROR', e)).receive('timeout', () => callback('RETRYING_AFTER_TIMEOUT'));\n    return this.subscription;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAA+CA,YAA/C,QAAmE,uBAAnE;AAGA,OAAM,MAAOC,sBAAP,CAA6B;EAGjCC,YAAYC,MAAZ,EAAoCC,OAApC,EAA4DC,MAA5D,EAA4EC,SAA5E,EAA6F;IAC3F,MAAMC,UAAU,GAAkB,EAAlC;IACA,MAAMC,KAAK,GAAGF,SAAS,KAAK,GAAd,GAAoB,YAAYD,MAAM,EAAtC,GAA2C,YAAYA,MAAM,IAAIC,SAAS,EAAxF;IACA,MAAMG,SAAS,GAAGL,OAAO,CAAC,eAAD,CAAP,CAAyBM,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,CAAlB;;IAEA,IAAID,SAAJ,EAAe;MACbF,UAAU,CAAC,YAAD,CAAV,GAA2BE,SAA3B;IACD;;IAED,KAAKE,YAAL,GAAoBR,MAAM,CAACS,OAAP,CAAeJ,KAAf,EAAsBD,UAAtB,CAApB;EACD;;EAEOM,iBAAiB,CAACC,OAAD,EAAa;IACpC,MAAMC,OAAO,GAAG;MACdC,GAAG,EAAE,EADS;MAEdC,GAAG,EAAE;IAFS,CAAhB;;IAKA,IAAIH,OAAO,CAACI,IAAR,KAAiB,QAAjB,IAA6BJ,OAAO,CAACI,IAAR,KAAiB,QAAlD,EAA4D;MAC1DH,OAAO,CAACC,GAAR,GAAchB,YAAY,CAACmB,iBAAb,CAA+BL,OAAO,CAACM,OAAvC,EAAgDN,OAAO,CAACO,MAAxD,CAAd;IACD;;IAED,IAAIP,OAAO,CAACI,IAAR,KAAiB,QAAjB,IAA6BJ,OAAO,CAACI,IAAR,KAAiB,QAAlD,EAA4D;MAC1DH,OAAO,CAACE,GAAR,GAAcjB,YAAY,CAACmB,iBAAb,CAA+BL,OAAO,CAACM,OAAvC,EAAgDN,OAAO,CAACQ,UAAxD,CAAd;IACD;;IAED,OAAOP,OAAP;EACD;EAED;;;;;;;;EAMAQ,EAAE,CAACC,KAAD,EAA4BC,QAA5B,EAAqF;IACrF,KAAKd,YAAL,CAAkBY,EAAlB,CAAqBC,KAArB,EAA6BV,OAAD,IAAiB;MAC3C,IAAIY,eAAe,GAAiC;QAClDrB,MAAM,EAAES,OAAO,CAACT,MADkC;QAElDsB,KAAK,EAAEb,OAAO,CAACa,KAFmC;QAGlDC,gBAAgB,EAAEd,OAAO,CAACc,gBAHwB;QAIlDC,SAAS,EAAEf,OAAO,CAACI,IAJ+B;QAKlDF,GAAG,EAAE,EAL6C;QAMlDC,GAAG,EAAE,EAN6C;QAOlDa,MAAM,EAAEhB,OAAO,CAACgB;MAPkC,CAApD;MAUAJ,eAAe,mCAAQA,eAAR,GAA4B,KAAKb,iBAAL,CAAuBC,OAAvB,CAA5B,CAAf;MAEAW,QAAQ,CAACC,eAAD,CAAR;IACD,CAdD;IAeA,OAAO,IAAP;EACD;EAED;;;;;EAGAK,SAAS,GAA8B;IAAA,IAA7BN,QAA6B,uEAAR,MAAK,CAAG;IACrC,KAAKd,YAAL,CAAkBqB,OAAlB,CAA2BC,CAAD,IAAcR,QAAQ,CAAC,oBAAD,EAAuBQ,CAAvB,CAAhD;IACA,KAAKtB,YAAL,CAAkBuB,OAAlB,CAA0B,MAAMT,QAAQ,CAAC,QAAD,CAAxC;IACA,KAAKd,YAAL,CACGoB,SADH,GAEGI,OAFH,CAEW,IAFX,EAEiB,MAAMV,QAAQ,CAAC,YAAD,CAF/B,EAGGU,OAHH,CAGW,OAHX,EAGqBF,CAAD,IAAcR,QAAQ,CAAC,oBAAD,EAAuBQ,CAAvB,CAH1C,EAIGE,OAJH,CAIW,SAJX,EAIsB,MAAMV,QAAQ,CAAC,wBAAD,CAJpC;IAKA,OAAO,KAAKd,YAAZ;EACD;;AArEgC","names":["Transformers","SupabaseRealtimeClient","constructor","socket","headers","schema","tableName","chanParams","topic","userToken","split","subscription","channel","getPayloadRecords","payload","records","new","old","type","convertChangeData","columns","record","old_record","on","event","callback","enrichedPayload","table","commit_timestamp","eventType","errors","subscribe","onError","e","onClose","receive"],"sources":["/home/gabriel/Dropbox/Ufersa/Aulas/PW/2021.2/Unidade 2/aula 8 - pratica/todo/node_modules/@supabase/supabase-js/src/lib/SupabaseRealtimeClient.ts"],"sourcesContent":["import { RealtimeSubscription, RealtimeClient, Transformers } from '@supabase/realtime-js'\nimport { GenericObject, SupabaseEventTypes, SupabaseRealtimePayload } from './types'\n\nexport class SupabaseRealtimeClient {\n  subscription: RealtimeSubscription\n\n  constructor(socket: RealtimeClient, headers: GenericObject, schema: string, tableName: string) {\n    const chanParams: GenericObject = {}\n    const topic = tableName === '*' ? `realtime:${schema}` : `realtime:${schema}:${tableName}`\n    const userToken = headers['Authorization'].split(' ')[1]\n\n    if (userToken) {\n      chanParams['user_token'] = userToken\n    }\n\n    this.subscription = socket.channel(topic, chanParams) as RealtimeSubscription\n  }\n\n  private getPayloadRecords(payload: any) {\n    const records = {\n      new: {},\n      old: {},\n    }\n\n    if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n      records.new = Transformers.convertChangeData(payload.columns, payload.record)\n    }\n\n    if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n      records.old = Transformers.convertChangeData(payload.columns, payload.old_record)\n    }\n\n    return records\n  }\n\n  /**\n   * The event you want to listen to.\n   *\n   * @param event The event\n   * @param callback A callback function that is called whenever the event occurs.\n   */\n  on(event: SupabaseEventTypes, callback: (payload: SupabaseRealtimePayload<any>) => void) {\n    this.subscription.on(event, (payload: any) => {\n      let enrichedPayload: SupabaseRealtimePayload<any> = {\n        schema: payload.schema,\n        table: payload.table,\n        commit_timestamp: payload.commit_timestamp,\n        eventType: payload.type,\n        new: {},\n        old: {},\n        errors: payload.errors,\n      }\n\n      enrichedPayload = { ...enrichedPayload, ...this.getPayloadRecords(payload) }\n\n      callback(enrichedPayload)\n    })\n    return this\n  }\n\n  /**\n   * Enables the subscription.\n   */\n  subscribe(callback: Function = () => {}) {\n    this.subscription.onError((e: Error) => callback('SUBSCRIPTION_ERROR', e))\n    this.subscription.onClose(() => callback('CLOSED'))\n    this.subscription\n      .subscribe()\n      .receive('ok', () => callback('SUBSCRIBED'))\n      .receive('error', (e: Error) => callback('SUBSCRIPTION_ERROR', e))\n      .receive('timeout', () => callback('RETRYING_AFTER_TIMEOUT'))\n    return this.subscription\n  }\n}\n"]},"metadata":{},"sourceType":"module"}