{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nconst _getErrorMessage = err => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);\n\nconst handleError = (error, reject) => {\n  if (typeof error.json !== 'function') {\n    return reject(error);\n  }\n\n  error.json().then(err => {\n    return reject({\n      message: _getErrorMessage(err),\n      status: (error === null || error === void 0 ? void 0 : error.status) || 500\n    });\n  });\n};\n\nconst _getRequestParams = (method, options, parameters, body) => {\n  const params = {\n    method,\n    headers: (options === null || options === void 0 ? void 0 : options.headers) || {}\n  };\n\n  if (method === 'GET') {\n    return params;\n  }\n\n  params.headers = Object.assign({\n    'Content-Type': 'application/json'\n  }, options === null || options === void 0 ? void 0 : options.headers);\n  params.body = JSON.stringify(body);\n  return Object.assign(Object.assign({}, params), parameters);\n};\n\nfunction _handleRequest(fetcher, method, url, options, parameters, body) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return new Promise((resolve, reject) => {\n      fetcher(url, _getRequestParams(method, options, parameters, body)).then(result => {\n        if (!result.ok) throw result;\n        if (options === null || options === void 0 ? void 0 : options.noResolveJson) return resolve(result);\n        return result.json();\n      }).then(data => resolve(data)).catch(error => handleError(error, reject));\n    });\n  });\n}\n\nexport function get(fetcher, url, options, parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'GET', url, options, parameters);\n  });\n}\nexport function post(fetcher, url, body, options, parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'POST', url, options, parameters, body);\n  });\n}\nexport function put(fetcher, url, body, options, parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'PUT', url, options, parameters, body);\n  });\n}\nexport function remove(fetcher, url, body, options, parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return _handleRequest(fetcher, 'DELETE', url, options, parameters, body);\n  });\n}","map":{"version":3,"mappings":"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","names":["_getErrorMessage","err","msg","message","error_description","error","JSON","stringify","handleError","reject","json","then","status","_getRequestParams","method","options","parameters","body","params","headers","Object","_handleRequest","fetcher","url","Promise","resolve","result","ok","noResolveJson","data","catch","get","post","put","remove"],"sources":["/home/gabriel/Dropbox/Ufersa/Aulas/PW/2021.2/Unidade 2/aula 8 - pratica/todo/node_modules/@supabase/storage-js/src/lib/fetch.ts"],"sourcesContent":["export type Fetch = typeof fetch\n\nexport interface FetchOptions {\n  headers?: {\n    [key: string]: string\n  }\n  noResolveJson?: boolean\n}\n\nexport interface FetchParameters {\n  signal?: AbortSignal\n}\n\nexport type RequestMethodType = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\nconst _getErrorMessage = (err: any): string =>\n  err.msg || err.message || err.error_description || err.error || JSON.stringify(err)\n\nconst handleError = (error: any, reject: any) => {\n  if (typeof error.json !== 'function') {\n    return reject(error)\n  }\n  error.json().then((err: any) => {\n    return reject({\n      message: _getErrorMessage(err),\n      status: error?.status || 500,\n    })\n  })\n}\n\nconst _getRequestParams = (\n  method: RequestMethodType,\n  options?: FetchOptions,\n  parameters?: FetchParameters,\n  body?: object\n) => {\n  const params: { [k: string]: any } = { method, headers: options?.headers || {} }\n\n  if (method === 'GET') {\n    return params\n  }\n\n  params.headers = { 'Content-Type': 'application/json', ...options?.headers }\n  params.body = JSON.stringify(body)\n  return { ...params, ...parameters }\n}\n\nasync function _handleRequest(\n  fetcher: Fetch,\n  method: RequestMethodType,\n  url: string,\n  options?: FetchOptions,\n  parameters?: FetchParameters,\n  body?: object\n): Promise<any> {\n  return new Promise((resolve, reject) => {\n    fetcher(url, _getRequestParams(method, options, parameters, body))\n      .then((result) => {\n        if (!result.ok) throw result\n        if (options?.noResolveJson) return resolve(result)\n        return result.json()\n      })\n      .then((data) => resolve(data))\n      .catch((error) => handleError(error, reject))\n  })\n}\n\nexport async function get(\n  fetcher: Fetch,\n  url: string,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'GET', url, options, parameters)\n}\n\nexport async function post(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'POST', url, options, parameters, body)\n}\n\nexport async function put(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'PUT', url, options, parameters, body)\n}\n\nexport async function remove(\n  fetcher: Fetch,\n  url: string,\n  body: object,\n  options?: FetchOptions,\n  parameters?: FetchParameters\n): Promise<any> {\n  return _handleRequest(fetcher, 'DELETE', url, options, parameters, body)\n}\n"]},"metadata":{},"sourceType":"module"}