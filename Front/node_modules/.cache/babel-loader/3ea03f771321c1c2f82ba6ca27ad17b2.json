{"ast":null,"code":"import PostgrestQueryBuilder from './lib/PostgrestQueryBuilder';\nimport PostgrestRpcBuilder from './lib/PostgrestRpcBuilder';\nimport { DEFAULT_HEADERS } from './lib/constants';\nexport default class PostgrestClient {\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url  URL of the PostgREST endpoint.\n   * @param headers  Custom headers.\n   * @param schema  Postgres schema to switch to.\n   */\n  constructor(url) {\n    let {\n      headers = {},\n      schema,\n      fetch,\n      throwOnError\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.schema = schema;\n    this.fetch = fetch;\n    this.shouldThrowOnError = throwOnError;\n  }\n  /**\n   * Authenticates the request with JWT.\n   *\n   * @param token  The JWT token to use.\n   */\n\n\n  auth(token) {\n    this.headers['Authorization'] = `Bearer ${token}`;\n    return this;\n  }\n  /**\n   * Perform a table operation.\n   *\n   * @param table  The table name to operate on.\n   */\n\n\n  from(table) {\n    const url = `${this.url}/${table}`;\n    return new PostgrestQueryBuilder(url, {\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      shouldThrowOnError: this.shouldThrowOnError\n    });\n  }\n  /**\n   * Perform a function call.\n   *\n   * @param fn  The function name to call.\n   * @param params  The parameters to pass to the function call.\n   * @param head  When set to true, no data will be returned.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n\n\n  rpc(fn, params) {\n    let {\n      head = false,\n      count = null\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const url = `${this.url}/rpc/${fn}`;\n    return new PostgrestRpcBuilder(url, {\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      shouldThrowOnError: this.shouldThrowOnError\n    }).rpc(params, {\n      head,\n      count\n    });\n  }\n\n}","map":{"version":3,"mappings":"AAAA,OAAOA,qBAAP,MAAkC,6BAAlC;AACA,OAAOC,mBAAP,MAAgC,2BAAhC;AAEA,SAASC,eAAT,QAAgC,iBAAhC;AAGA,eAAc,MAAOC,eAAP,CAAsB;EAOlC;;;;;;;EAOAC,YACEC,GADF,EAYQ;IAAA,IAVN;MACEC,OAAO,GAAG,EADZ;MAEEC,MAFF;MAGEC,KAHF;MAIEC;IAJF,CAUM,uEAAF,EAAE;IAEN,KAAKJ,GAAL,GAAWA,GAAX;IACA,KAAKC,OAAL,GAAYI,gCAAQR,eAAR,GAA4BI,OAA5B,CAAZ;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKG,kBAAL,GAA0BF,YAA1B;EACD;EAED;;;;;;;EAKAG,IAAI,CAACC,KAAD,EAAc;IAChB,KAAKP,OAAL,CAAa,eAAb,IAAgC,UAAUO,KAAK,EAA/C;IACA,OAAO,IAAP;EACD;EAED;;;;;;;EAKAC,IAAI,CAAUC,KAAV,EAAuB;IACzB,MAAMV,GAAG,GAAG,GAAG,KAAKA,GAAG,IAAIU,KAAK,EAAhC;IACA,OAAO,IAAIf,qBAAJ,CAA6BK,GAA7B,EAAkC;MACvCC,OAAO,EAAE,KAAKA,OADyB;MAEvCC,MAAM,EAAE,KAAKA,MAF0B;MAGvCC,KAAK,EAAE,KAAKA,KAH2B;MAIvCG,kBAAkB,EAAE,KAAKA;IAJc,CAAlC,CAAP;EAMD;EAED;;;;;;;;;;EAQAK,GAAG,CACDC,EADC,EAEDC,MAFC,EASK;IAAA,IANN;MACEC,IAAI,GAAG,KADT;MAEEC,KAAK,GAAG;IAFV,CAMM,uEAAF,EAAE;IAEN,MAAMf,GAAG,GAAG,GAAG,KAAKA,GAAG,QAAQY,EAAE,EAAjC;IACA,OAAO,IAAIhB,mBAAJ,CAA2BI,GAA3B,EAAgC;MACrCC,OAAO,EAAE,KAAKA,OADuB;MAErCC,MAAM,EAAE,KAAKA,MAFwB;MAGrCC,KAAK,EAAE,KAAKA,KAHyB;MAIrCG,kBAAkB,EAAE,KAAKA;IAJY,CAAhC,EAKJK,GALI,CAKAE,MALA,EAKQ;MAAEC,IAAF;MAAQC;IAAR,CALR,CAAP;EAMD;;AAtFiC","names":["PostgrestQueryBuilder","PostgrestRpcBuilder","DEFAULT_HEADERS","PostgrestClient","constructor","url","headers","schema","fetch","throwOnError","Object","shouldThrowOnError","auth","token","from","table","rpc","fn","params","head","count"],"sources":["/home/gabriel/Dropbox/Ufersa/Aulas/PW/2021.2/Unidade 2/aula 8 - pratica/todo/node_modules/@supabase/postgrest-js/src/PostgrestClient.ts"],"sourcesContent":["import PostgrestQueryBuilder from './lib/PostgrestQueryBuilder'\nimport PostgrestRpcBuilder from './lib/PostgrestRpcBuilder'\nimport PostgrestFilterBuilder from './lib/PostgrestFilterBuilder'\nimport { DEFAULT_HEADERS } from './lib/constants'\nimport { Fetch } from './lib/types'\n\nexport default class PostgrestClient {\n  url: string\n  headers: { [key: string]: string }\n  schema?: string\n  fetch?: Fetch\n  shouldThrowOnError?: boolean\n\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url  URL of the PostgREST endpoint.\n   * @param headers  Custom headers.\n   * @param schema  Postgres schema to switch to.\n   */\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      fetch,\n      throwOnError,\n    }: {\n      headers?: { [key: string]: string }\n      schema?: string\n      fetch?: Fetch\n      throwOnError?: boolean\n    } = {}\n  ) {\n    this.url = url\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.schema = schema\n    this.fetch = fetch\n    this.shouldThrowOnError = throwOnError\n  }\n\n  /**\n   * Authenticates the request with JWT.\n   *\n   * @param token  The JWT token to use.\n   */\n  auth(token: string): this {\n    this.headers['Authorization'] = `Bearer ${token}`\n    return this\n  }\n\n  /**\n   * Perform a table operation.\n   *\n   * @param table  The table name to operate on.\n   */\n  from<T = any>(table: string): PostgrestQueryBuilder<T> {\n    const url = `${this.url}/${table}`\n    return new PostgrestQueryBuilder<T>(url, {\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      shouldThrowOnError: this.shouldThrowOnError,\n    })\n  }\n\n  /**\n   * Perform a function call.\n   *\n   * @param fn  The function name to call.\n   * @param params  The parameters to pass to the function call.\n   * @param head  When set to true, no data will be returned.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  rpc<T = any>(\n    fn: string,\n    params?: object,\n    {\n      head = false,\n      count = null,\n    }: {\n      head?: boolean\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    const url = `${this.url}/rpc/${fn}`\n    return new PostgrestRpcBuilder<T>(url, {\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      shouldThrowOnError: this.shouldThrowOnError,\n    }).rpc(params, { head, count })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}