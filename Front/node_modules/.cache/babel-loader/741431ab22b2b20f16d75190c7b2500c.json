{"ast":null,"code":"import PostgrestTransformBuilder from './PostgrestTransformBuilder';\nexport default class PostgrestFilterBuilder extends PostgrestTransformBuilder {\n  constructor() {\n    super(...arguments);\n    /** @deprecated Use `contains()` instead. */\n\n    this.cs = this.contains;\n    /** @deprecated Use `containedBy()` instead. */\n\n    this.cd = this.containedBy;\n    /** @deprecated Use `rangeLt()` instead. */\n\n    this.sl = this.rangeLt;\n    /** @deprecated Use `rangeGt()` instead. */\n\n    this.sr = this.rangeGt;\n    /** @deprecated Use `rangeGte()` instead. */\n\n    this.nxl = this.rangeGte;\n    /** @deprecated Use `rangeLte()` instead. */\n\n    this.nxr = this.rangeLte;\n    /** @deprecated Use `rangeAdjacent()` instead. */\n\n    this.adj = this.rangeAdjacent;\n    /** @deprecated Use `overlaps()` instead. */\n\n    this.ov = this.overlaps;\n  }\n  /**\n   * Finds all rows which doesn't satisfy the filter.\n   *\n   * @param column  The column to filter on.\n   * @param operator  The operator to filter with.\n   * @param value  The value to filter with.\n   */\n\n\n  not(column, operator, value) {\n    this.url.searchParams.append(`${column}`, `not.${operator}.${value}`);\n    return this;\n  }\n  /**\n   * Finds all rows satisfying at least one of the filters.\n   *\n   * @param filters  The filters to use, separated by commas.\n   * @param foreignTable  The foreign table to use (if `column` is a foreign column).\n   */\n\n\n  or(filters) {\n    let {\n      foreignTable\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const key = typeof foreignTable === 'undefined' ? 'or' : `${foreignTable}.or`;\n    this.url.searchParams.append(key, `(${filters})`);\n    return this;\n  }\n  /**\n   * Finds all rows whose value on the stated `column` exactly matches the\n   * specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n\n\n  eq(column, value) {\n    this.url.searchParams.append(`${column}`, `eq.${value}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose value on the stated `column` doesn't match the\n   * specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n\n\n  neq(column, value) {\n    this.url.searchParams.append(`${column}`, `neq.${value}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose value on the stated `column` is greater than the\n   * specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n\n\n  gt(column, value) {\n    this.url.searchParams.append(`${column}`, `gt.${value}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose value on the stated `column` is greater than or\n   * equal to the specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n\n\n  gte(column, value) {\n    this.url.searchParams.append(`${column}`, `gte.${value}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose value on the stated `column` is less than the\n   * specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n\n\n  lt(column, value) {\n    this.url.searchParams.append(`${column}`, `lt.${value}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose value on the stated `column` is less than or equal\n   * to the specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n\n\n  lte(column, value) {\n    this.url.searchParams.append(`${column}`, `lte.${value}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose value in the stated `column` matches the supplied\n   * `pattern` (case sensitive).\n   *\n   * @param column  The column to filter on.\n   * @param pattern  The pattern to filter with.\n   */\n\n\n  like(column, pattern) {\n    this.url.searchParams.append(`${column}`, `like.${pattern}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose value in the stated `column` matches the supplied\n   * `pattern` (case insensitive).\n   *\n   * @param column  The column to filter on.\n   * @param pattern  The pattern to filter with.\n   */\n\n\n  ilike(column, pattern) {\n    this.url.searchParams.append(`${column}`, `ilike.${pattern}`);\n    return this;\n  }\n  /**\n   * A check for exact equality (null, true, false), finds all rows whose\n   * value on the stated `column` exactly match the specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n\n\n  is(column, value) {\n    this.url.searchParams.append(`${column}`, `is.${value}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose value on the stated `column` is found on the\n   * specified `values`.\n   *\n   * @param column  The column to filter on.\n   * @param values  The values to filter with.\n   */\n\n\n  in(column, values) {\n    const cleanedValues = values.map(s => {\n      // handle postgrest reserved characters\n      // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\n      if (typeof s === 'string' && new RegExp('[,()]').test(s)) return `\"${s}\"`;else return `${s}`;\n    }).join(',');\n    this.url.searchParams.append(`${column}`, `in.(${cleanedValues})`);\n    return this;\n  }\n  /**\n   * Finds all rows whose json, array, or range value on the stated `column`\n   * contains the values specified in `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n\n\n  contains(column, value) {\n    if (typeof value === 'string') {\n      // range types can be inclusive '[', ']' or exclusive '(', ')' so just\n      // keep it simple and accept a string\n      this.url.searchParams.append(`${column}`, `cs.${value}`);\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(`${column}`, `cs.{${value.join(',')}}`);\n    } else {\n      // json\n      this.url.searchParams.append(`${column}`, `cs.${JSON.stringify(value)}`);\n    }\n\n    return this;\n  }\n  /**\n   * Finds all rows whose json, array, or range value on the stated `column` is\n   * contained by the specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n\n\n  containedBy(column, value) {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(`${column}`, `cd.${value}`);\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(`${column}`, `cd.{${value.join(',')}}`);\n    } else {\n      // json\n      this.url.searchParams.append(`${column}`, `cd.${JSON.stringify(value)}`);\n    }\n\n    return this;\n  }\n  /**\n   * Finds all rows whose range value on the stated `column` is strictly to the\n   * left of the specified `range`.\n   *\n   * @param column  The column to filter on.\n   * @param range  The range to filter with.\n   */\n\n\n  rangeLt(column, range) {\n    this.url.searchParams.append(`${column}`, `sl.${range}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose range value on the stated `column` is strictly to\n   * the right of the specified `range`.\n   *\n   * @param column  The column to filter on.\n   * @param range  The range to filter with.\n   */\n\n\n  rangeGt(column, range) {\n    this.url.searchParams.append(`${column}`, `sr.${range}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose range value on the stated `column` does not extend\n   * to the left of the specified `range`.\n   *\n   * @param column  The column to filter on.\n   * @param range  The range to filter with.\n   */\n\n\n  rangeGte(column, range) {\n    this.url.searchParams.append(`${column}`, `nxl.${range}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose range value on the stated `column` does not extend\n   * to the right of the specified `range`.\n   *\n   * @param column  The column to filter on.\n   * @param range  The range to filter with.\n   */\n\n\n  rangeLte(column, range) {\n    this.url.searchParams.append(`${column}`, `nxr.${range}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose range value on the stated `column` is adjacent to\n   * the specified `range`.\n   *\n   * @param column  The column to filter on.\n   * @param range  The range to filter with.\n   */\n\n\n  rangeAdjacent(column, range) {\n    this.url.searchParams.append(`${column}`, `adj.${range}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose array or range value on the stated `column` overlaps\n   * (has a value in common) with the specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n\n\n  overlaps(column, value) {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(`${column}`, `ov.${value}`);\n    } else {\n      // array\n      this.url.searchParams.append(`${column}`, `ov.{${value.join(',')}}`);\n    }\n\n    return this;\n  }\n  /**\n   * Finds all rows whose text or tsvector value on the stated `column` matches\n   * the tsquery in `query`.\n   *\n   * @param column  The column to filter on.\n   * @param query  The Postgres tsquery string to filter with.\n   * @param config  The text search configuration to use.\n   * @param type  The type of tsquery conversion to use on `query`.\n   */\n\n\n  textSearch(column, query) {\n    let {\n      config,\n      type = null\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let typePart = '';\n\n    if (type === 'plain') {\n      typePart = 'pl';\n    } else if (type === 'phrase') {\n      typePart = 'ph';\n    } else if (type === 'websearch') {\n      typePart = 'w';\n    }\n\n    const configPart = config === undefined ? '' : `(${config})`;\n    this.url.searchParams.append(`${column}`, `${typePart}fts${configPart}.${query}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose tsvector value on the stated `column` matches\n   * to_tsquery(`query`).\n   *\n   * @param column  The column to filter on.\n   * @param query  The Postgres tsquery string to filter with.\n   * @param config  The text search configuration to use.\n   *\n   * @deprecated Use `textSearch()` instead.\n   */\n\n\n  fts(column, query) {\n    let {\n      config\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const configPart = typeof config === 'undefined' ? '' : `(${config})`;\n    this.url.searchParams.append(`${column}`, `fts${configPart}.${query}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose tsvector value on the stated `column` matches\n   * plainto_tsquery(`query`).\n   *\n   * @param column  The column to filter on.\n   * @param query  The Postgres tsquery string to filter with.\n   * @param config  The text search configuration to use.\n   *\n   * @deprecated Use `textSearch()` with `type: 'plain'` instead.\n   */\n\n\n  plfts(column, query) {\n    let {\n      config\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const configPart = typeof config === 'undefined' ? '' : `(${config})`;\n    this.url.searchParams.append(`${column}`, `plfts${configPart}.${query}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose tsvector value on the stated `column` matches\n   * phraseto_tsquery(`query`).\n   *\n   * @param column  The column to filter on.\n   * @param query  The Postgres tsquery string to filter with.\n   * @param config  The text search configuration to use.\n   *\n   * @deprecated Use `textSearch()` with `type: 'phrase'` instead.\n   */\n\n\n  phfts(column, query) {\n    let {\n      config\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const configPart = typeof config === 'undefined' ? '' : `(${config})`;\n    this.url.searchParams.append(`${column}`, `phfts${configPart}.${query}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose tsvector value on the stated `column` matches\n   * websearch_to_tsquery(`query`).\n   *\n   * @param column  The column to filter on.\n   * @param query  The Postgres tsquery string to filter with.\n   * @param config  The text search configuration to use.\n   *\n   * @deprecated Use `textSearch()` with `type: 'websearch'` instead.\n   */\n\n\n  wfts(column, query) {\n    let {\n      config\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const configPart = typeof config === 'undefined' ? '' : `(${config})`;\n    this.url.searchParams.append(`${column}`, `wfts${configPart}.${query}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose `column` satisfies the filter.\n   *\n   * @param column  The column to filter on.\n   * @param operator  The operator to filter with.\n   * @param value  The value to filter with.\n   */\n\n\n  filter(column, operator, value) {\n    this.url.searchParams.append(`${column}`, `${operator}.${value}`);\n    return this;\n  }\n  /**\n   * Finds all rows whose columns match the specified `query` object.\n   *\n   * @param query  The object to filter with, with column names as keys mapped\n   *               to their filter values.\n   */\n\n\n  match(query) {\n    Object.keys(query).forEach(key => {\n      this.url.searchParams.append(`${key}`, `eq.${query[key]}`);\n    });\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["PostgrestTransformBuilder","PostgrestFilterBuilder","constructor","contains","containedBy","rangeLt","rangeGt","rangeGte","rangeLte","rangeAdjacent","overlaps","not","column","operator","value","url","searchParams","append","or","filters","foreignTable","key","eq","neq","gt","gte","lt","lte","like","pattern","ilike","is","in","values","cleanedValues","map","s","RegExp","test","join","Array","isArray","JSON","stringify","range","textSearch","query","config","type","typePart","configPart","undefined","fts","plfts","phfts","wfts","filter","match","Object","keys","forEach"],"sources":["/home/gabriel/Dropbox/Ufersa/Aulas/PW/2021.2/Unidade 2/aula 8 - pratica/todo/node_modules/@supabase/postgrest-js/src/lib/PostgrestFilterBuilder.ts"],"sourcesContent":["import PostgrestTransformBuilder from './PostgrestTransformBuilder'\n\n/**\n * Filters\n */\n\ntype FilterOperator =\n  | 'eq'\n  | 'neq'\n  | 'gt'\n  | 'gte'\n  | 'lt'\n  | 'lte'\n  | 'like'\n  | 'ilike'\n  | 'is'\n  | 'in'\n  | 'cs'\n  | 'cd'\n  | 'sl'\n  | 'sr'\n  | 'nxl'\n  | 'nxr'\n  | 'adj'\n  | 'ov'\n  | 'fts'\n  | 'plfts'\n  | 'phfts'\n  | 'wfts'\n  | 'not.eq'\n  | 'not.neq'\n  | 'not.gt'\n  | 'not.gte'\n  | 'not.lt'\n  | 'not.lte'\n  | 'not.like'\n  | 'not.ilike'\n  | 'not.is'\n  | 'not.in'\n  | 'not.cs'\n  | 'not.cd'\n  | 'not.sl'\n  | 'not.sr'\n  | 'not.nxl'\n  | 'not.nxr'\n  | 'not.adj'\n  | 'not.ov'\n  | 'not.fts'\n  | 'not.plfts'\n  | 'not.phfts'\n  | 'not.wfts'\n\nexport default class PostgrestFilterBuilder<T> extends PostgrestTransformBuilder<T> {\n  /**\n   * Finds all rows which doesn't satisfy the filter.\n   *\n   * @param column  The column to filter on.\n   * @param operator  The operator to filter with.\n   * @param value  The value to filter with.\n   */\n  not(column: keyof T, operator: FilterOperator, value: any): this {\n    this.url.searchParams.append(`${column}`, `not.${operator}.${value}`)\n    return this\n  }\n\n  /**\n   * Finds all rows satisfying at least one of the filters.\n   *\n   * @param filters  The filters to use, separated by commas.\n   * @param foreignTable  The foreign table to use (if `column` is a foreign column).\n   */\n  or(filters: string, { foreignTable }: { foreignTable?: string } = {}): this {\n    const key = typeof foreignTable === 'undefined' ? 'or' : `${foreignTable}.or`\n    this.url.searchParams.append(key, `(${filters})`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose value on the stated `column` exactly matches the\n   * specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n  eq(column: keyof T, value: T[keyof T]): this {\n    this.url.searchParams.append(`${column}`, `eq.${value}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose value on the stated `column` doesn't match the\n   * specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n  neq(column: keyof T, value: T[keyof T]): this {\n    this.url.searchParams.append(`${column}`, `neq.${value}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose value on the stated `column` is greater than the\n   * specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n  gt(column: keyof T, value: T[keyof T]): this {\n    this.url.searchParams.append(`${column}`, `gt.${value}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose value on the stated `column` is greater than or\n   * equal to the specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n  gte(column: keyof T, value: T[keyof T]): this {\n    this.url.searchParams.append(`${column}`, `gte.${value}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose value on the stated `column` is less than the\n   * specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n  lt(column: keyof T, value: T[keyof T]): this {\n    this.url.searchParams.append(`${column}`, `lt.${value}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose value on the stated `column` is less than or equal\n   * to the specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n  lte(column: keyof T, value: T[keyof T]): this {\n    this.url.searchParams.append(`${column}`, `lte.${value}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose value in the stated `column` matches the supplied\n   * `pattern` (case sensitive).\n   *\n   * @param column  The column to filter on.\n   * @param pattern  The pattern to filter with.\n   */\n  like(column: keyof T, pattern: string): this {\n    this.url.searchParams.append(`${column}`, `like.${pattern}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose value in the stated `column` matches the supplied\n   * `pattern` (case insensitive).\n   *\n   * @param column  The column to filter on.\n   * @param pattern  The pattern to filter with.\n   */\n  ilike(column: keyof T, pattern: string): this {\n    this.url.searchParams.append(`${column}`, `ilike.${pattern}`)\n    return this\n  }\n\n  /**\n   * A check for exact equality (null, true, false), finds all rows whose\n   * value on the stated `column` exactly match the specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n  is(column: keyof T, value: boolean | null): this {\n    this.url.searchParams.append(`${column}`, `is.${value}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose value on the stated `column` is found on the\n   * specified `values`.\n   *\n   * @param column  The column to filter on.\n   * @param values  The values to filter with.\n   */\n  in(column: keyof T, values: T[keyof T][]): this {\n    const cleanedValues = values\n      .map((s) => {\n        // handle postgrest reserved characters\n        // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\n        if (typeof s === 'string' && new RegExp('[,()]').test(s)) return `\"${s}\"`\n        else return `${s}`\n      })\n      .join(',')\n    this.url.searchParams.append(`${column}`, `in.(${cleanedValues})`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose json, array, or range value on the stated `column`\n   * contains the values specified in `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n  contains(column: keyof T, value: string | T[keyof T][] | object): this {\n    if (typeof value === 'string') {\n      // range types can be inclusive '[', ']' or exclusive '(', ')' so just\n      // keep it simple and accept a string\n      this.url.searchParams.append(`${column}`, `cs.${value}`)\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(`${column}`, `cs.{${value.join(',')}}`)\n    } else {\n      // json\n      this.url.searchParams.append(`${column}`, `cs.${JSON.stringify(value)}`)\n    }\n    return this\n  }\n\n  /** @deprecated Use `contains()` instead. */\n  cs = this.contains\n\n  /**\n   * Finds all rows whose json, array, or range value on the stated `column` is\n   * contained by the specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n  containedBy(column: keyof T, value: string | T[keyof T][] | object): this {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(`${column}`, `cd.${value}`)\n    } else if (Array.isArray(value)) {\n      // array\n      this.url.searchParams.append(`${column}`, `cd.{${value.join(',')}}`)\n    } else {\n      // json\n      this.url.searchParams.append(`${column}`, `cd.${JSON.stringify(value)}`)\n    }\n    return this\n  }\n\n  /** @deprecated Use `containedBy()` instead. */\n  cd = this.containedBy\n\n  /**\n   * Finds all rows whose range value on the stated `column` is strictly to the\n   * left of the specified `range`.\n   *\n   * @param column  The column to filter on.\n   * @param range  The range to filter with.\n   */\n  rangeLt(column: keyof T, range: string): this {\n    this.url.searchParams.append(`${column}`, `sl.${range}`)\n    return this\n  }\n\n  /** @deprecated Use `rangeLt()` instead. */\n  sl = this.rangeLt\n\n  /**\n   * Finds all rows whose range value on the stated `column` is strictly to\n   * the right of the specified `range`.\n   *\n   * @param column  The column to filter on.\n   * @param range  The range to filter with.\n   */\n  rangeGt(column: keyof T, range: string): this {\n    this.url.searchParams.append(`${column}`, `sr.${range}`)\n    return this\n  }\n\n  /** @deprecated Use `rangeGt()` instead. */\n  sr = this.rangeGt\n\n  /**\n   * Finds all rows whose range value on the stated `column` does not extend\n   * to the left of the specified `range`.\n   *\n   * @param column  The column to filter on.\n   * @param range  The range to filter with.\n   */\n  rangeGte(column: keyof T, range: string): this {\n    this.url.searchParams.append(`${column}`, `nxl.${range}`)\n    return this\n  }\n\n  /** @deprecated Use `rangeGte()` instead. */\n  nxl = this.rangeGte\n\n  /**\n   * Finds all rows whose range value on the stated `column` does not extend\n   * to the right of the specified `range`.\n   *\n   * @param column  The column to filter on.\n   * @param range  The range to filter with.\n   */\n  rangeLte(column: keyof T, range: string): this {\n    this.url.searchParams.append(`${column}`, `nxr.${range}`)\n    return this\n  }\n\n  /** @deprecated Use `rangeLte()` instead. */\n  nxr = this.rangeLte\n\n  /**\n   * Finds all rows whose range value on the stated `column` is adjacent to\n   * the specified `range`.\n   *\n   * @param column  The column to filter on.\n   * @param range  The range to filter with.\n   */\n  rangeAdjacent(column: keyof T, range: string): this {\n    this.url.searchParams.append(`${column}`, `adj.${range}`)\n    return this\n  }\n\n  /** @deprecated Use `rangeAdjacent()` instead. */\n  adj = this.rangeAdjacent\n\n  /**\n   * Finds all rows whose array or range value on the stated `column` overlaps\n   * (has a value in common) with the specified `value`.\n   *\n   * @param column  The column to filter on.\n   * @param value  The value to filter with.\n   */\n  overlaps(column: keyof T, value: string | T[keyof T][]): this {\n    if (typeof value === 'string') {\n      // range\n      this.url.searchParams.append(`${column}`, `ov.${value}`)\n    } else {\n      // array\n      this.url.searchParams.append(`${column}`, `ov.{${value.join(',')}}`)\n    }\n    return this\n  }\n\n  /** @deprecated Use `overlaps()` instead. */\n  ov = this.overlaps\n\n  /**\n   * Finds all rows whose text or tsvector value on the stated `column` matches\n   * the tsquery in `query`.\n   *\n   * @param column  The column to filter on.\n   * @param query  The Postgres tsquery string to filter with.\n   * @param config  The text search configuration to use.\n   * @param type  The type of tsquery conversion to use on `query`.\n   */\n  textSearch(\n    column: keyof T,\n    query: string,\n    {\n      config,\n      type = null,\n    }: { config?: string; type?: 'plain' | 'phrase' | 'websearch' | null } = {}\n  ): this {\n    let typePart = ''\n    if (type === 'plain') {\n      typePart = 'pl'\n    } else if (type === 'phrase') {\n      typePart = 'ph'\n    } else if (type === 'websearch') {\n      typePart = 'w'\n    }\n    const configPart = config === undefined ? '' : `(${config})`\n    this.url.searchParams.append(`${column}`, `${typePart}fts${configPart}.${query}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose tsvector value on the stated `column` matches\n   * to_tsquery(`query`).\n   *\n   * @param column  The column to filter on.\n   * @param query  The Postgres tsquery string to filter with.\n   * @param config  The text search configuration to use.\n   *\n   * @deprecated Use `textSearch()` instead.\n   */\n  fts(column: keyof T, query: string, { config }: { config?: string } = {}): this {\n    const configPart = typeof config === 'undefined' ? '' : `(${config})`\n    this.url.searchParams.append(`${column}`, `fts${configPart}.${query}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose tsvector value on the stated `column` matches\n   * plainto_tsquery(`query`).\n   *\n   * @param column  The column to filter on.\n   * @param query  The Postgres tsquery string to filter with.\n   * @param config  The text search configuration to use.\n   *\n   * @deprecated Use `textSearch()` with `type: 'plain'` instead.\n   */\n  plfts(column: keyof T, query: string, { config }: { config?: string } = {}): this {\n    const configPart = typeof config === 'undefined' ? '' : `(${config})`\n    this.url.searchParams.append(`${column}`, `plfts${configPart}.${query}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose tsvector value on the stated `column` matches\n   * phraseto_tsquery(`query`).\n   *\n   * @param column  The column to filter on.\n   * @param query  The Postgres tsquery string to filter with.\n   * @param config  The text search configuration to use.\n   *\n   * @deprecated Use `textSearch()` with `type: 'phrase'` instead.\n   */\n  phfts(column: keyof T, query: string, { config }: { config?: string } = {}): this {\n    const configPart = typeof config === 'undefined' ? '' : `(${config})`\n    this.url.searchParams.append(`${column}`, `phfts${configPart}.${query}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose tsvector value on the stated `column` matches\n   * websearch_to_tsquery(`query`).\n   *\n   * @param column  The column to filter on.\n   * @param query  The Postgres tsquery string to filter with.\n   * @param config  The text search configuration to use.\n   *\n   * @deprecated Use `textSearch()` with `type: 'websearch'` instead.\n   */\n  wfts(column: keyof T, query: string, { config }: { config?: string } = {}): this {\n    const configPart = typeof config === 'undefined' ? '' : `(${config})`\n    this.url.searchParams.append(`${column}`, `wfts${configPart}.${query}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose `column` satisfies the filter.\n   *\n   * @param column  The column to filter on.\n   * @param operator  The operator to filter with.\n   * @param value  The value to filter with.\n   */\n  filter(column: keyof T, operator: FilterOperator, value: any): this {\n    this.url.searchParams.append(`${column}`, `${operator}.${value}`)\n    return this\n  }\n\n  /**\n   * Finds all rows whose columns match the specified `query` object.\n   *\n   * @param query  The object to filter with, with column names as keys mapped\n   *               to their filter values.\n   */\n  match(query: Record<string, unknown>): this {\n    Object.keys(query).forEach((key) => {\n      this.url.searchParams.append(`${key}`, `eq.${query[key]}`)\n    })\n    return this\n  }\n}\n"]},"metadata":{},"sourceType":"module"}