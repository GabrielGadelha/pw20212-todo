{"ast":null,"code":"/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\nexport default class RealtimePresence {\n  /**\n   * Initializes the Presence.\n   *\n   * @param channel - The RealtimeSubscription\n   * @param opts - The options,\n   *        for example `{events: {state: 'state', diff: 'diff'}}`\n   */\n  constructor(channel, opts) {\n    this.channel = channel;\n    this.state = {};\n    this.pendingDiffs = [];\n    this.joinRef = null;\n    this.caller = {\n      onJoin: () => {},\n      onLeave: () => {},\n      onSync: () => {}\n    };\n    const events = (opts === null || opts === void 0 ? void 0 : opts.events) || {\n      state: 'presence_state',\n      diff: 'presence_diff'\n    };\n    this.channel.on(events.state, {}, newState => {\n      const {\n        onJoin,\n        onLeave,\n        onSync\n      } = this.caller;\n      this.joinRef = this.channel.joinRef();\n      this.state = RealtimePresence.syncState(this.state, newState, onJoin, onLeave);\n      this.pendingDiffs.forEach(diff => {\n        this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n      });\n      this.pendingDiffs = [];\n      onSync();\n    });\n    this.channel.on(events.diff, {}, diff => {\n      const {\n        onJoin,\n        onLeave,\n        onSync\n      } = this.caller;\n\n      if (this.inPendingSyncState()) {\n        this.pendingDiffs.push(diff);\n      } else {\n        this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n        onSync();\n      }\n    });\n  }\n  /**\n   * Used to sync the list of presences on the server with the\n   * client's state.\n   *\n   * An optional `onJoin` and `onLeave` callback can be provided to\n   * react to changes in the client's local presences across\n   * disconnects and reconnects with the server.\n   */\n\n\n  static syncState(currentState, newState, onJoin, onLeave) {\n    const state = this.cloneDeep(currentState);\n    const transformedState = this.transformState(newState);\n    const joins = {};\n    const leaves = {};\n    this.map(state, (key, presences) => {\n      if (!transformedState[key]) {\n        leaves[key] = presences;\n      }\n    });\n    this.map(transformedState, (key, newPresences) => {\n      const currentPresences = state[key];\n\n      if (currentPresences) {\n        const newPresenceIds = newPresences.map(m => m.presence_id);\n        const curPresenceIds = currentPresences.map(m => m.presence_id);\n        const joinedPresences = newPresences.filter(m => curPresenceIds.indexOf(m.presence_id) < 0);\n        const leftPresences = currentPresences.filter(m => newPresenceIds.indexOf(m.presence_id) < 0);\n\n        if (joinedPresences.length > 0) {\n          joins[key] = joinedPresences;\n        }\n\n        if (leftPresences.length > 0) {\n          leaves[key] = leftPresences;\n        }\n      } else {\n        joins[key] = newPresences;\n      }\n    });\n    return this.syncDiff(state, {\n      joins,\n      leaves\n    }, onJoin, onLeave);\n  }\n  /**\n   * Used to sync a diff of presence join and leave events from the\n   * server, as they happen.\n   *\n   * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n   * `onLeave` callbacks to react to a user joining or leaving from a\n   * device.\n   */\n\n\n  static syncDiff(state, diff, onJoin, onLeave) {\n    const {\n      joins,\n      leaves\n    } = {\n      joins: this.transformState(diff.joins),\n      leaves: this.transformState(diff.leaves)\n    };\n\n    if (!onJoin) {\n      onJoin = () => {};\n    }\n\n    if (!onLeave) {\n      onLeave = () => {};\n    }\n\n    this.map(joins, (key, newPresences) => {\n      const currentPresences = state[key];\n      state[key] = this.cloneDeep(newPresences);\n\n      if (currentPresences) {\n        const joinedPresenceIds = state[key].map(m => m.presence_id);\n        const curPresences = currentPresences.filter(m => joinedPresenceIds.indexOf(m.presence_id) < 0);\n        state[key].unshift(...curPresences);\n      }\n\n      onJoin(key, currentPresences, newPresences);\n    });\n    this.map(leaves, (key, leftPresences) => {\n      let currentPresences = state[key];\n      if (!currentPresences) return;\n      const presenceIdsToRemove = leftPresences.map(m => m.presence_id);\n      currentPresences = currentPresences.filter(m => presenceIdsToRemove.indexOf(m.presence_id) < 0);\n      state[key] = currentPresences;\n      onLeave(key, currentPresences, leftPresences);\n      if (currentPresences.length === 0) delete state[key];\n    });\n    return state;\n  }\n  /**\n   * Returns the array of presences, with selected metadata.\n   */\n\n\n  static list(presences, chooser) {\n    if (!chooser) {\n      chooser = (_key, pres) => pres;\n    }\n\n    return this.map(presences, (key, presences) => chooser(key, presences));\n  }\n\n  static map(obj, func) {\n    return Object.getOwnPropertyNames(obj).map(key => func(key, obj[key]));\n  }\n  /**\n   * Remove 'metas' key\n   * Change 'phx_ref' to 'presence_id'\n   * Remove 'phx_ref' and 'phx_ref_prev'\n   *\n   * @example\n   * // returns {\n   *  abc123: [\n   *    { presence_id: '2', user_id: 1 },\n   *    { presence_id: '3', user_id: 2 }\n   *  ]\n   * }\n   * RealtimePresence.transformState({\n   *  abc123: {\n   *    metas: [\n   *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n   *      { phx_ref: '3', user_id: 2 }\n   *    ]\n   *  }\n   * })\n   */\n\n\n  static transformState(state) {\n    state = this.cloneDeep(state);\n    return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n      const presences = state[key];\n\n      if ('metas' in presences) {\n        newState[key] = presences.metas.map(presence => {\n          presence['presence_id'] = presence['phx_ref'];\n          delete presence['phx_ref'];\n          delete presence['phx_ref_prev'];\n          return presence;\n        });\n      } else {\n        newState[key] = presences;\n      }\n\n      return newState;\n    }, {});\n  }\n\n  static cloneDeep(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n\n  onJoin(callback) {\n    this.caller.onJoin = callback;\n  }\n\n  onLeave(callback) {\n    this.caller.onLeave = callback;\n  }\n\n  onSync(callback) {\n    this.caller.onSync = callback;\n  }\n\n  list(by) {\n    return RealtimePresence.list(this.state, by);\n  }\n\n  inPendingSyncState() {\n    return !this.joinRef || this.joinRef !== this.channel.joinRef();\n  }\n\n}","map":{"version":3,"mappings":"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","names":["RealtimePresence","constructor","channel","opts","onJoin","onLeave","onSync","events","state","diff","on","newState","caller","joinRef","syncState","pendingDiffs","forEach","syncDiff","inPendingSyncState","push","currentState","cloneDeep","transformedState","transformState","joins","leaves","map","key","presences","newPresences","currentPresences","newPresenceIds","m","presence_id","curPresenceIds","joinedPresences","filter","indexOf","leftPresences","length","joinedPresenceIds","curPresences","unshift","presenceIdsToRemove","list","chooser","_key","pres","obj","func","Object","getOwnPropertyNames","reduce","metas","presence","JSON","parse","stringify","callback","by"],"sources":["/home/gabriel/Dropbox/Ufersa/Aulas/PW/2021.2/Unidade 2/aula 8 - pratica/todo/node_modules/@supabase/realtime-js/src/RealtimePresence.ts"],"sourcesContent":["/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\n\nimport {\n  PresenceOpts,\n  PresenceOnJoinCallback,\n  PresenceOnLeaveCallback,\n} from 'phoenix'\nimport RealtimeChannel from './RealtimeChannel'\n\ntype Presence = {\n  presence_id: string\n  [key: string]: any\n}\n\ntype PresenceState = { [key: string]: Presence[] }\n\ntype PresenceDiff = {\n  joins: PresenceState\n  leaves: PresenceState\n}\n\ntype RawPresenceState = {\n  [key: string]: Record<\n    'metas',\n    {\n      phx_ref?: string\n      phx_ref_prev?: string\n      [key: string]: any\n    }[]\n  >\n}\n\ntype RawPresenceDiff = {\n  joins: RawPresenceState\n  leaves: RawPresenceState\n}\n\ntype PresenceChooser<T> = (key: string, presences: any) => T\n\nexport default class RealtimePresence {\n  state: PresenceState = {}\n  pendingDiffs: RawPresenceDiff[] = []\n  joinRef: string | null = null\n  caller: {\n    onJoin: PresenceOnJoinCallback\n    onLeave: PresenceOnLeaveCallback\n    onSync: () => void\n  } = {\n    onJoin: () => {},\n    onLeave: () => {},\n    onSync: () => {},\n  }\n\n  /**\n   * Initializes the Presence.\n   *\n   * @param channel - The RealtimeSubscription\n   * @param opts - The options,\n   *        for example `{events: {state: 'state', diff: 'diff'}}`\n   */\n  constructor(public channel: RealtimeChannel, opts?: PresenceOpts) {\n    const events = opts?.events || {\n      state: 'presence_state',\n      diff: 'presence_diff',\n    }\n\n    this.channel.on(events.state, {}, (newState: RawPresenceState) => {\n      const { onJoin, onLeave, onSync } = this.caller\n\n      this.joinRef = this.channel.joinRef()\n\n      this.state = RealtimePresence.syncState(\n        this.state,\n        newState,\n        onJoin,\n        onLeave\n      )\n\n      this.pendingDiffs.forEach((diff) => {\n        this.state = RealtimePresence.syncDiff(\n          this.state,\n          diff,\n          onJoin,\n          onLeave\n        )\n      })\n\n      this.pendingDiffs = []\n\n      onSync()\n    })\n\n    this.channel.on(events.diff, {}, (diff: RawPresenceDiff) => {\n      const { onJoin, onLeave, onSync } = this.caller\n\n      if (this.inPendingSyncState()) {\n        this.pendingDiffs.push(diff)\n      } else {\n        this.state = RealtimePresence.syncDiff(\n          this.state,\n          diff,\n          onJoin,\n          onLeave\n        )\n\n        onSync()\n      }\n    })\n  }\n\n  /**\n   * Used to sync the list of presences on the server with the\n   * client's state.\n   *\n   * An optional `onJoin` and `onLeave` callback can be provided to\n   * react to changes in the client's local presences across\n   * disconnects and reconnects with the server.\n   */\n  static syncState(\n    currentState: PresenceState,\n    newState: RawPresenceState | PresenceState,\n    onJoin: PresenceOnJoinCallback,\n    onLeave: PresenceOnLeaveCallback\n  ): PresenceState {\n    const state = this.cloneDeep(currentState)\n    const transformedState = this.transformState(newState)\n    const joins: PresenceState = {}\n    const leaves: PresenceState = {}\n\n    this.map(state, (key: string, presences: Presence[]) => {\n      if (!transformedState[key]) {\n        leaves[key] = presences\n      }\n    })\n\n    this.map(transformedState, (key, newPresences: Presence[]) => {\n      const currentPresences: Presence[] = state[key]\n\n      if (currentPresences) {\n        const newPresenceIds = newPresences.map((m: Presence) => m.presence_id)\n        const curPresenceIds = currentPresences.map(\n          (m: Presence) => m.presence_id\n        )\n        const joinedPresences: Presence[] = newPresences.filter(\n          (m: Presence) => curPresenceIds.indexOf(m.presence_id) < 0\n        )\n        const leftPresences: Presence[] = currentPresences.filter(\n          (m: Presence) => newPresenceIds.indexOf(m.presence_id) < 0\n        )\n\n        if (joinedPresences.length > 0) {\n          joins[key] = joinedPresences\n        }\n\n        if (leftPresences.length > 0) {\n          leaves[key] = leftPresences\n        }\n      } else {\n        joins[key] = newPresences\n      }\n    })\n\n    return this.syncDiff(state, { joins, leaves }, onJoin, onLeave)\n  }\n\n  /**\n   * Used to sync a diff of presence join and leave events from the\n   * server, as they happen.\n   *\n   * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n   * `onLeave` callbacks to react to a user joining or leaving from a\n   * device.\n   */\n  static syncDiff(\n    state: PresenceState,\n    diff: RawPresenceDiff | PresenceDiff,\n    onJoin: PresenceOnJoinCallback,\n    onLeave: PresenceOnLeaveCallback\n  ): PresenceState {\n    const { joins, leaves } = {\n      joins: this.transformState(diff.joins),\n      leaves: this.transformState(diff.leaves),\n    }\n\n    if (!onJoin) {\n      onJoin = () => {}\n    }\n\n    if (!onLeave) {\n      onLeave = () => {}\n    }\n\n    this.map(joins, (key, newPresences: Presence[]) => {\n      const currentPresences: Presence[] = state[key]\n      state[key] = this.cloneDeep(newPresences)\n\n      if (currentPresences) {\n        const joinedPresenceIds = state[key].map((m: Presence) => m.presence_id)\n        const curPresences: Presence[] = currentPresences.filter(\n          (m: Presence) => joinedPresenceIds.indexOf(m.presence_id) < 0\n        )\n\n        state[key].unshift(...curPresences)\n      }\n\n      onJoin(key, currentPresences, newPresences)\n    })\n\n    this.map(leaves, (key, leftPresences: Presence[]) => {\n      let currentPresences: Presence[] = state[key]\n\n      if (!currentPresences) return\n\n      const presenceIdsToRemove = leftPresences.map(\n        (m: Presence) => m.presence_id\n      )\n      currentPresences = currentPresences.filter(\n        (m: Presence) => presenceIdsToRemove.indexOf(m.presence_id) < 0\n      )\n\n      state[key] = currentPresences\n\n      onLeave(key, currentPresences, leftPresences)\n\n      if (currentPresences.length === 0) delete state[key]\n    })\n\n    return state\n  }\n\n  /**\n   * Returns the array of presences, with selected metadata.\n   */\n  static list<T = any>(\n    presences: PresenceState,\n    chooser: PresenceChooser<T> | undefined\n  ): T[] {\n    if (!chooser) {\n      chooser = (_key, pres) => pres\n    }\n\n    return this.map(presences, (key, presences: Presence[]) =>\n      chooser!(key, presences)\n    )\n  }\n\n  private static map<T = any>(\n    obj: PresenceState,\n    func: PresenceChooser<T>\n  ): T[] {\n    return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]))\n  }\n\n  /**\n   * Remove 'metas' key\n   * Change 'phx_ref' to 'presence_id'\n   * Remove 'phx_ref' and 'phx_ref_prev'\n   *\n   * @example\n   * // returns {\n   *  abc123: [\n   *    { presence_id: '2', user_id: 1 },\n   *    { presence_id: '3', user_id: 2 }\n   *  ]\n   * }\n   * RealtimePresence.transformState({\n   *  abc123: {\n   *    metas: [\n   *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n   *      { phx_ref: '3', user_id: 2 }\n   *    ]\n   *  }\n   * })\n   */\n  private static transformState(\n    state: RawPresenceState | PresenceState\n  ): PresenceState {\n    state = this.cloneDeep(state)\n\n    return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n      const presences = state[key]\n\n      if ('metas' in presences) {\n        newState[key] = presences.metas.map((presence) => {\n          presence['presence_id'] = presence['phx_ref']\n\n          delete presence['phx_ref']\n          delete presence['phx_ref_prev']\n\n          return presence\n        }) as Presence[]\n      } else {\n        newState[key] = presences\n      }\n\n      return newState\n    }, {} as PresenceState)\n  }\n\n  private static cloneDeep(obj: object) {\n    return JSON.parse(JSON.stringify(obj))\n  }\n\n  onJoin(callback: PresenceOnJoinCallback): void {\n    this.caller.onJoin = callback\n  }\n\n  onLeave(callback: PresenceOnLeaveCallback): void {\n    this.caller.onLeave = callback\n  }\n\n  onSync(callback: () => void): void {\n    this.caller.onSync = callback\n  }\n\n  list<T = any>(by?: PresenceChooser<T>): T[] {\n    return RealtimePresence.list<T>(this.state, by)\n  }\n\n  private inPendingSyncState(): boolean {\n    return !this.joinRef || this.joinRef !== this.channel.joinRef()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}